
d:/DEVELOPMENT/Radio_Eastern/particle_argon/doorbell/target/3.3.0/argon/doorbell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002714  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6730  000b6730  00006730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6754  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e600  000b6758  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  2003e66c  2003e66c  0002e66c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b67c4  000b67c4  000267c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b67ec  000b67ec  000267ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f69a8  00000000  00000000  000267f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000106ee  00000000  00000000  0011d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00037ce3  00000000  00000000  0012d886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002980  00000000  00000000  00165569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009ee8  00000000  00000000  00167ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c91  00000000  00000000  00171dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003746b  00000000  00000000  001a6a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e9d5  00000000  00000000  001ddecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000076e0  00000000  00000000  0030c8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f89f 	bl	b6170 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f8a7 	bl	b618c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e600 	.word	0x2003e600
   b4048:	000b6758 	.word	0x000b6758
   b404c:	2003e66c 	.word	0x2003e66c
   b4050:	2003e66c 	.word	0x2003e66c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f9c7 	bl	b53f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6704 	.word	0x000b6704
   b407c:	000b6728 	.word	0x000b6728

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b868 	b.w	b4154 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f879 	bl	b417c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b967 	b.w	b5360 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bedf 	b.w	b4e54 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bedd 	b.w	b4e54 <malloc>

000b409a <_ZdaPv>:
   b409a:	f000 bee3 	b.w	b4e64 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bee1 	b.w	b4e64 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z8callbackPcPhj>:
void callback(char* topic, byte* payload, unsigned int length);
MQTT client(url, 1883, callback);
void connect(MQTT & client);

// Receive message
void callback(char* topic, byte* payload, unsigned int length) {
   b40b4:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   b40b6:	f102 0308 	add.w	r3, r2, #8
   b40ba:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   b40be:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40c0:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   b40c4:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40c6:	4668      	mov	r0, sp
   b40c8:	f002 f852 	bl	b6170 <memcpy>
  p[length] = NULL;
   b40cc:	2300      	movs	r3, #0
   b40ce:	f80d 3004 	strb.w	r3, [sp, r4]
  
  Serial.println("Callback");
   b40d2:	f001 faab 	bl	b562c <_Z16_fetch_usbserialv>
   b40d6:	4907      	ldr	r1, [pc, #28]	; (b40f4 <_Z8callbackPcPhj+0x40>)
   b40d8:	f001 f87b 	bl	b51d2 <_ZN5Print7printlnEPKc>
  Serial.println(p);
   b40dc:	f001 faa6 	bl	b562c <_Z16_fetch_usbserialv>
   b40e0:	4669      	mov	r1, sp
   b40e2:	f001 f876 	bl	b51d2 <_ZN5Print7printlnEPKc>
  delay(1000);
   b40e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b40ea:	f001 f8e7 	bl	b52bc <delay>
}
   b40ee:	46bd      	mov	sp, r7
   b40f0:	bd98      	pop	{r3, r4, r7, pc}
   b40f2:	bf00      	nop
   b40f4:	000b630c 	.word	0x000b630c

000b40f8 <_Z7connectR4MQTT>:


void connect(MQTT & client){
   b40f8:	b510      	push	{r4, lr}
   b40fa:	b088      	sub	sp, #32
   b40fc:	4604      	mov	r4, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b40fe:	4911      	ldr	r1, [pc, #68]	; (b4144 <_Z7connectR4MQTT+0x4c>)
   b4100:	a804      	add	r0, sp, #16
   b4102:	f000 ffb6 	bl	b5072 <_ZN6StringC1EPK19__FlashStringHelper>
  // connect to the server(unique id by Time.now())
  client.connect("MBlashkiArgon_" + String(Time.now()), "MBlashkiArgon", "1234");
   b4106:	f001 f8bf 	bl	b5288 <_ZN9TimeClass3nowEv>
   b410a:	220a      	movs	r2, #10
   b410c:	4601      	mov	r1, r0
   b410e:	4668      	mov	r0, sp
   b4110:	f000 ffd5 	bl	b50be <_ZN6StringC1Elh>
   b4114:	4669      	mov	r1, sp
   b4116:	a804      	add	r0, sp, #16
   b4118:	f000 fffb 	bl	b5112 <_ZplRK15StringSumHelperRK6String>
   b411c:	4b0a      	ldr	r3, [pc, #40]	; (b4148 <_Z7connectR4MQTT+0x50>)
   b411e:	6801      	ldr	r1, [r0, #0]
   b4120:	4a0a      	ldr	r2, [pc, #40]	; (b414c <_Z7connectR4MQTT+0x54>)
   b4122:	4620      	mov	r0, r4
   b4124:	f000 fa80 	bl	b4628 <_ZN4MQTT7connectEPKcS1_S1_>
   b4128:	4668      	mov	r0, sp
   b412a:	f000 ff57 	bl	b4fdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b412e:	a804      	add	r0, sp, #16
   b4130:	f000 ff54 	bl	b4fdc <_ZN6StringD1Ev>
  client.subscribe("inTopic/message");
   b4134:	4906      	ldr	r1, [pc, #24]	; (b4150 <_Z7connectR4MQTT+0x58>)
   b4136:	4620      	mov	r0, r4
}
   b4138:	b008      	add	sp, #32
   b413a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.subscribe("inTopic/message");
   b413e:	f000 bca2 	b.w	b4a86 <_ZN4MQTT9subscribeEPKc>
   b4142:	bf00      	nop
   b4144:	000b6315 	.word	0x000b6315
   b4148:	000b6324 	.word	0x000b6324
   b414c:	000b6329 	.word	0x000b6329
   b4150:	000b6337 	.word	0x000b6337

000b4154 <setup>:

// Setup
void setup() {
   b4154:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b4156:	f001 fa69 	bl	b562c <_Z16_fetch_usbserialv>
   b415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b415e:	f001 fa59 	bl	b5614 <_ZN9USBSerial5beginEl>
  Serial.println("Start!");
   b4162:	f001 fa63 	bl	b562c <_Z16_fetch_usbserialv>
   b4166:	4904      	ldr	r1, [pc, #16]	; (b4178 <setup+0x24>)
   b4168:	f001 f833 	bl	b51d2 <_ZN5Print7printlnEPKc>
  RGB.control(true);

}
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RGB.control(true);
   b4170:	2001      	movs	r0, #1
   b4172:	f001 b8bd 	b.w	b52f0 <_ZN8RGBClass7controlEb>
   b4176:	bf00      	nop
   b4178:	000b6347 	.word	0x000b6347

000b417c <loop>:

// Loop
void loop() {
   b417c:	b508      	push	{r3, lr}
  if (client.isConnected()){
   b417e:	4810      	ldr	r0, [pc, #64]	; (b41c0 <loop+0x44>)
   b4180:	f000 f962 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b4184:	b190      	cbz	r0, b41ac <loop+0x30>
    client.loop();
   b4186:	480e      	ldr	r0, [pc, #56]	; (b41c0 <loop+0x44>)
   b4188:	f000 fb35 	bl	b47f6 <_ZN4MQTT4loopEv>
    // publish/subscribe
    Serial.println("Publish");
   b418c:	f001 fa4e 	bl	b562c <_Z16_fetch_usbserialv>
   b4190:	490c      	ldr	r1, [pc, #48]	; (b41c4 <loop+0x48>)
   b4192:	f001 f81e 	bl	b51d2 <_ZN5Print7printlnEPKc>
    client.publish("inTopic/message","hello world");
   b4196:	4a0c      	ldr	r2, [pc, #48]	; (b41c8 <loop+0x4c>)
   b4198:	490c      	ldr	r1, [pc, #48]	; (b41cc <loop+0x50>)
   b419a:	4809      	ldr	r0, [pc, #36]	; (b41c0 <loop+0x44>)
   b419c:	f000 facf 	bl	b473e <_ZN4MQTT7publishEPKcS1_>
  }
  else{
    Serial.println("Disconnected! Trying to reconnect now...");
    connect(client);
  }
}
   b41a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(30000);
   b41a4:	f247 5030 	movw	r0, #30000	; 0x7530
   b41a8:	f001 b888 	b.w	b52bc <delay>
    Serial.println("Disconnected! Trying to reconnect now...");
   b41ac:	f001 fa3e 	bl	b562c <_Z16_fetch_usbserialv>
   b41b0:	4907      	ldr	r1, [pc, #28]	; (b41d0 <loop+0x54>)
   b41b2:	f001 f80e 	bl	b51d2 <_ZN5Print7printlnEPKc>
}
   b41b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    connect(client);
   b41ba:	4801      	ldr	r0, [pc, #4]	; (b41c0 <loop+0x44>)
   b41bc:	f7ff bf9c 	b.w	b40f8 <_Z7connectR4MQTT>
   b41c0:	2003e67c 	.word	0x2003e67c
   b41c4:	000b634e 	.word	0x000b634e
   b41c8:	000b6356 	.word	0x000b6356
   b41cc:	000b6337 	.word	0x000b6337
   b41d0:	000b6362 	.word	0x000b6362

000b41d4 <_GLOBAL__sub_I_client>:
}
   b41d4:	b513      	push	{r0, r1, r4, lr}
const String url = "192.168.0.26";
   b41d6:	4c08      	ldr	r4, [pc, #32]	; (b41f8 <_GLOBAL__sub_I_client+0x24>)
   b41d8:	4908      	ldr	r1, [pc, #32]	; (b41fc <_GLOBAL__sub_I_client+0x28>)
   b41da:	4620      	mov	r0, r4
   b41dc:	f000 ff49 	bl	b5072 <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client(url, 1883, callback);
   b41e0:	2300      	movs	r3, #0
   b41e2:	9300      	str	r3, [sp, #0]
   b41e4:	6821      	ldr	r1, [r4, #0]
   b41e6:	4b06      	ldr	r3, [pc, #24]	; (b4200 <_GLOBAL__sub_I_client+0x2c>)
   b41e8:	4806      	ldr	r0, [pc, #24]	; (b4204 <_GLOBAL__sub_I_client+0x30>)
   b41ea:	f240 725b 	movw	r2, #1883	; 0x75b
   b41ee:	f000 f84f 	bl	b4290 <_ZN4MQTTC1EPKctPFvPcPhjEb>
}
   b41f2:	b002      	add	sp, #8
   b41f4:	bd10      	pop	{r4, pc}
   b41f6:	bf00      	nop
   b41f8:	2003e66c 	.word	0x2003e66c
   b41fc:	000b638b 	.word	0x000b638b
   b4200:	000b40b5 	.word	0x000b40b5
   b4204:	2003e67c 	.word	0x2003e67c

000b4208 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4208:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b420c:	b510      	push	{r4, lr}
   b420e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4210:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4212:	b113      	cbz	r3, b421a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4214:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4216:	f000 fc79 	bl	b4b0c <os_mutex_lock>
#endif
#endif
#endif
        }
   b421a:	4620      	mov	r0, r4
   b421c:	bd10      	pop	{r4, pc}

000b421e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b421e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4226:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4228:	b112      	cbz	r2, b4230 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b422a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b422c:	f000 fc76 	bl	b4b1c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4230:	4620      	mov	r0, r4
   b4232:	bd10      	pop	{r4, pc}

000b4234 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4236:	461f      	mov	r7, r3
   b4238:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b423c:	4604      	mov	r4, r0
   b423e:	460d      	mov	r5, r1
   b4240:	4616      	mov	r6, r2
    if (thread) {
   b4242:	b12b      	cbz	r3, b4250 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4244:	2301      	movs	r3, #1
   b4246:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b424a:	3058      	adds	r0, #88	; 0x58
   b424c:	f000 fc56 	bl	b4afc <os_mutex_create>
    }
    this->callback = callback;
   b4250:	9b08      	ldr	r3, [sp, #32]
   b4252:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4254:	2300      	movs	r3, #0
   b4256:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4258:	b106      	cbz	r6, b425c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b425a:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b425c:	b125      	cbz	r5, b4268 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b425e:	4629      	mov	r1, r5
   b4260:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4264:	f000 ff19 	bl	b509a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4268:	9b06      	ldr	r3, [sp, #24]
   b426a:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b426c:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b426e:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4270:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4274:	2bff      	cmp	r3, #255	; 0xff
   b4276:	bfb8      	it	lt
   b4278:	23ff      	movlt	r3, #255	; 0xff
   b427a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b427e:	b108      	cbz	r0, b4284 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4280:	f7ff ff0b 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4284:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4288:	f7ff ff05 	bl	b4096 <_Znaj>
   b428c:	61e0      	str	r0, [r4, #28]
}
   b428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4290 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4290:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4294:	4604      	mov	r4, r0
            bool thread) {
   b4296:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4298:	4617      	mov	r7, r2
   b429a:	4698      	mov	r8, r3
   b429c:	460e      	mov	r6, r1
            bool thread) {
   b429e:	f001 fcf5 	bl	b5c8c <_ZN9TCPClientC1Ev>
   b42a2:	490d      	ldr	r1, [pc, #52]	; (b42d8 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b42a4:	61e5      	str	r5, [r4, #28]
   b42a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b42aa:	f000 fee2 	bl	b5072 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42ae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b42b2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42b4:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b42b8:	22ff      	movs	r2, #255	; 0xff
   b42ba:	230f      	movs	r3, #15
   b42bc:	e9cd 3200 	strd	r3, r2, [sp]
   b42c0:	4620      	mov	r0, r4
            bool thread) {
   b42c2:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42c6:	463b      	mov	r3, r7
   b42c8:	462a      	mov	r2, r5
   b42ca:	4631      	mov	r1, r6
   b42cc:	f7ff ffb2 	bl	b4234 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b42d0:	4620      	mov	r0, r4
   b42d2:	b004      	add	sp, #16
   b42d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42d8:	000b634d 	.word	0x000b634d

000b42dc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b42dc:	b510      	push	{r4, lr}
   b42de:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b42e0:	4620      	mov	r0, r4
   b42e2:	f001 fc2f 	bl	b5b44 <_ZN9TCPClient9availableEv>
   b42e6:	2800      	cmp	r0, #0
   b42e8:	d0fa      	beq.n	b42e0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b42ea:	4620      	mov	r0, r4
   b42ec:	f001 fa38 	bl	b5760 <_ZN9TCPClient4readEv>
}
   b42f0:	b2c0      	uxtb	r0, r0
   b42f2:	bd10      	pop	{r4, pc}

000b42f4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b42f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b42f8:	4605      	mov	r5, r0
   b42fa:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b42fc:	f7ff ffee 	bl	b42dc <_ZN4MQTT8readByteEv>
   b4300:	69eb      	ldr	r3, [r5, #28]
   b4302:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4304:	69eb      	ldr	r3, [r5, #28]
   b4306:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b430a:	f04f 0901 	mov.w	r9, #1
   b430e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4312:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4314:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4316:	4628      	mov	r0, r5
   b4318:	f7ff ffe0 	bl	b42dc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b431c:	4626      	mov	r6, r4
   b431e:	69eb      	ldr	r3, [r5, #28]
   b4320:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4322:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4326:	fb13 f309 	smulbb	r3, r3, r9
   b432a:	441f      	add	r7, r3
        buffer[len++] = digit;
   b432c:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b432e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4330:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4332:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4334:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4338:	d4ed      	bmi.n	b4316 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b433a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b433c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4340:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4344:	d11e      	bne.n	b4384 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4346:	4628      	mov	r0, r5
   b4348:	f7ff ffc8 	bl	b42dc <_ZN4MQTT8readByteEv>
   b434c:	69eb      	ldr	r3, [r5, #28]
   b434e:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4350:	4628      	mov	r0, r5
   b4352:	f7ff ffc3 	bl	b42dc <_ZN4MQTT8readByteEv>
   b4356:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4358:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b435a:	b2b6      	uxth	r6, r6
   b435c:	69eb      	ldr	r3, [r5, #28]
   b435e:	b2a4      	uxth	r4, r4
   b4360:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4362:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4364:	b2b6      	uxth	r6, r6
   b4366:	42be      	cmp	r6, r7
   b4368:	d20e      	bcs.n	b4388 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b436a:	4628      	mov	r0, r5
   b436c:	f7ff ffb6 	bl	b42dc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4370:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4374:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4376:	bf84      	itt	hi
   b4378:	69eb      	ldrhi	r3, [r5, #28]
   b437a:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b437c:	3401      	adds	r4, #1
   b437e:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4380:	3601      	adds	r6, #1
   b4382:	e7ef      	b.n	b4364 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4384:	2600      	movs	r6, #0
   b4386:	e7ed      	b.n	b4364 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4388:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b438c:	42a3      	cmp	r3, r4
   b438e:	bf2c      	ite	cs
   b4390:	4620      	movcs	r0, r4
   b4392:	2000      	movcc	r0, #0
   b4394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4398 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b439c:	4615      	mov	r5, r2
   b439e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b43a0:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b43a2:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b43a4:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b43a6:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b43a8:	a802      	add	r0, sp, #8
        digit = len % 128;
   b43aa:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b43ae:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b43b2:	f103 0401 	add.w	r4, r3, #1
   b43b6:	4403      	add	r3, r0
            digit |= 0x80;
   b43b8:	bf88      	it	hi
   b43ba:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b43be:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b43c2:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b43c6:	b2e4      	uxtb	r4, r4
   b43c8:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b43cc:	d81e      	bhi.n	b440c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b43ce:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b43d2:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b43d6:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b43d8:	4622      	mov	r2, r4
   b43da:	a901      	add	r1, sp, #4
   b43dc:	4428      	add	r0, r5
    buf[4-llen] = header;
   b43de:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b43e2:	f001 fec5 	bl	b6170 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b43e6:	1c72      	adds	r2, r6, #1
   b43e8:	4422      	add	r2, r4
   b43ea:	4641      	mov	r1, r8
   b43ec:	4638      	mov	r0, r7
   b43ee:	f001 f9a2 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
   b43f2:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43f4:	f000 fb6a 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b43f8:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b43fa:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b43fc:	4432      	add	r2, r6
   b43fe:	b2a8      	uxth	r0, r5
}
   b4400:	1a13      	subs	r3, r2, r0
   b4402:	4258      	negs	r0, r3
   b4404:	4158      	adcs	r0, r3
   b4406:	b002      	add	sp, #8
   b4408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b440c:	4623      	mov	r3, r4
   b440e:	e7ca      	b.n	b43a6 <_ZN4MQTT5writeEhPht+0xe>

000b4410 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4410:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4412:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4414:	4605      	mov	r5, r0
    pos += 2;
   b4416:	b298      	uxth	r0, r3
   b4418:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b441a:	5cce      	ldrb	r6, [r1, r3]
   b441c:	b29c      	uxth	r4, r3
   b441e:	b156      	cbz	r6, b4436 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4420:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4424:	4584      	cmp	ip, r0
   b4426:	f103 0701 	add.w	r7, r3, #1
   b442a:	d904      	bls.n	b4436 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b442c:	1c44      	adds	r4, r0, #1
   b442e:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4430:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4432:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4434:	e7f1      	b.n	b441a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4436:	b299      	uxth	r1, r3
   b4438:	1a41      	subs	r1, r0, r1
   b443a:	440a      	add	r2, r1
   b443c:	0a21      	lsrs	r1, r4, #8
   b443e:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4442:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4446:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4448 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4448:	b538      	push	{r3, r4, r5, lr}
   b444a:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b444c:	f001 fa9c 	bl	b5988 <_ZN9TCPClient9connectedEv>
   b4450:	2800      	cmp	r0, #0
   b4452:	bf14      	ite	ne
   b4454:	2501      	movne	r5, #1
   b4456:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4458:	d102      	bne.n	b4460 <_ZN4MQTT11isConnectedEv+0x18>
   b445a:	4620      	mov	r0, r4
   b445c:	f001 fbcc 	bl	b5bf8 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4460:	4628      	mov	r0, r5
   b4462:	bd38      	pop	{r3, r4, r5, pc}

000b4464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4468:	b088      	sub	sp, #32
   b446a:	4604      	mov	r4, r0
   b446c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4470:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4474:	4689      	mov	r9, r1
   b4476:	4617      	mov	r7, r2
   b4478:	461e      	mov	r6, r3
    if (!isConnected()) {
   b447a:	f7ff ffe5 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b447e:	4605      	mov	r5, r0
   b4480:	2800      	cmp	r0, #0
   b4482:	f040 80cd 	bne.w	b4620 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4486:	4621      	mov	r1, r4
   b4488:	a801      	add	r0, sp, #4
   b448a:	f7ff febd 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b448e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4490:	2900      	cmp	r1, #0
   b4492:	f040 8088 	bne.w	b45a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4496:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b449a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b449c:	462b      	mov	r3, r5
   b449e:	4620      	mov	r0, r4
   b44a0:	f001 f9f4 	bl	b588c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b44a4:	2800      	cmp	r0, #0
   b44a6:	d07a      	beq.n	b459e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b44a8:	2301      	movs	r3, #1
   b44aa:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b44ac:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b44b0:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b44b2:	2b04      	cmp	r3, #4
   b44b4:	4b5b      	ldr	r3, [pc, #364]	; (b4624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b44b6:	f040 8081 	bne.w	b45bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b44ba:	6818      	ldr	r0, [r3, #0]
   b44bc:	8899      	ldrh	r1, [r3, #4]
   b44be:	799b      	ldrb	r3, [r3, #6]
   b44c0:	f8ad 100c 	strh.w	r1, [sp, #12]
   b44c4:	f88d 300e 	strb.w	r3, [sp, #14]
   b44c8:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b44ca:	f8c2 0005 	str.w	r0, [r2, #5]
   b44ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b44d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b44d6:	f8a2 1009 	strh.w	r1, [r2, #9]
   b44da:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b44dc:	230c      	movs	r3, #12
            if (willTopic) {
   b44de:	f1b8 0f00 	cmp.w	r8, #0
   b44e2:	f000 8081 	beq.w	b45e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b44e6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b44ea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b44ee:	0140      	lsls	r0, r0, #5
   b44f0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b44f4:	f040 0006 	orr.w	r0, r0, #6
   b44f8:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b44fa:	f1ba 0f00 	cmp.w	sl, #0
   b44fe:	d101      	bne.n	b4504 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4500:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4504:	b11f      	cbz	r7, b450e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4506:	2e00      	cmp	r6, #0
   b4508:	d170      	bne.n	b45ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b450a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b450e:	69e2      	ldr	r2, [r4, #28]
   b4510:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4512:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4514:	69e1      	ldr	r1, [r4, #28]
   b4516:	1c58      	adds	r0, r3, #1
   b4518:	1212      	asrs	r2, r2, #8
   b451a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b451c:	1c9a      	adds	r2, r3, #2
   b451e:	69e1      	ldr	r1, [r4, #28]
   b4520:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4522:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4524:	3303      	adds	r3, #3
   b4526:	69e2      	ldr	r2, [r4, #28]
   b4528:	4649      	mov	r1, r9
   b452a:	4620      	mov	r0, r4
   b452c:	f7ff ff70 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
   b4530:	4603      	mov	r3, r0
            if (willTopic) {
   b4532:	f1b8 0f00 	cmp.w	r8, #0
   b4536:	d00b      	beq.n	b4550 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4538:	69e2      	ldr	r2, [r4, #28]
   b453a:	4641      	mov	r1, r8
   b453c:	4620      	mov	r0, r4
   b453e:	f7ff ff67 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4542:	69e2      	ldr	r2, [r4, #28]
   b4544:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4546:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4548:	4620      	mov	r0, r4
   b454a:	f7ff ff61 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
   b454e:	4603      	mov	r3, r0
            if(user != NULL) {
   b4550:	b167      	cbz	r7, b456c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4552:	69e2      	ldr	r2, [r4, #28]
   b4554:	4639      	mov	r1, r7
   b4556:	4620      	mov	r0, r4
   b4558:	f7ff ff5a 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
   b455c:	4603      	mov	r3, r0
                if(pass != NULL) {
   b455e:	b12e      	cbz	r6, b456c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4560:	69e2      	ldr	r2, [r4, #28]
   b4562:	4631      	mov	r1, r6
   b4564:	4620      	mov	r0, r4
   b4566:	f7ff ff53 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
   b456a:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b456c:	3b05      	subs	r3, #5
   b456e:	69e2      	ldr	r2, [r4, #28]
   b4570:	b29b      	uxth	r3, r3
   b4572:	2110      	movs	r1, #16
   b4574:	4620      	mov	r0, r4
   b4576:	f7ff ff0f 	bl	b4398 <_ZN4MQTT5writeEhPht>
   b457a:	f000 faa7 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b457e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4582:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4586:	4620      	mov	r0, r4
   b4588:	f001 fadc 	bl	b5b44 <_ZN9TCPClient9availableEv>
   b458c:	bb88      	cbnz	r0, b45f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b458e:	f000 fa9d 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4592:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4594:	1ac0      	subs	r0, r0, r3
   b4596:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4598:	4373      	muls	r3, r6
   b459a:	4298      	cmp	r0, r3
   b459c:	d9f3      	bls.n	b4586 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b459e:	4620      	mov	r0, r4
   b45a0:	f001 fb2a 	bl	b5bf8 <_ZN9TCPClient4stopEv>
   b45a4:	e035      	b.n	b4612 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b45a6:	a802      	add	r0, sp, #8
   b45a8:	f000 ffd2 	bl	b5550 <_ZN9IPAddressC1EPKh>
   b45ac:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b45b0:	462b      	mov	r3, r5
   b45b2:	a902      	add	r1, sp, #8
   b45b4:	4620      	mov	r0, r4
   b45b6:	f001 fa49 	bl	b5a4c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b45ba:	e773      	b.n	b44a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b45bc:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b45c0:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b45c4:	7bdb      	ldrb	r3, [r3, #15]
   b45c6:	f10d 0c08 	add.w	ip, sp, #8
   b45ca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b45ce:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b45d2:	ab02      	add	r3, sp, #8
   b45d4:	cb03      	ldmia	r3!, {r0, r1}
   b45d6:	f8c2 0005 	str.w	r0, [r2, #5]
   b45da:	f8c2 1009 	str.w	r1, [r2, #9]
   b45de:	f89c 3000 	ldrb.w	r3, [ip]
   b45e2:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b45e4:	230e      	movs	r3, #14
   b45e6:	e77a      	b.n	b44de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b45e8:	2002      	movs	r0, #2
   b45ea:	e786      	b.n	b44fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b45ec:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b45f0:	e78d      	b.n	b450e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b45f2:	a902      	add	r1, sp, #8
   b45f4:	4620      	mov	r0, r4
   b45f6:	f7ff fe7d 	bl	b42f4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b45fa:	2804      	cmp	r0, #4
   b45fc:	d1cf      	bne.n	b459e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b45fe:	69e3      	ldr	r3, [r4, #28]
   b4600:	78de      	ldrb	r6, [r3, #3]
   b4602:	2e00      	cmp	r6, #0
   b4604:	d1cb      	bne.n	b459e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4606:	f000 fa61 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b460a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b460c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b460e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4612:	a801      	add	r0, sp, #4
   b4614:	f7ff fe03 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4618:	4628      	mov	r0, r5
   b461a:	b008      	add	sp, #32
   b461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4620:	2500      	movs	r5, #0
   b4622:	e7f9      	b.n	b4618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4624:	000b6398 	.word	0x000b6398

000b4628 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4628:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b462a:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b462e:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4630:	2401      	movs	r4, #1
   b4632:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4636:	2400      	movs	r4, #0
   b4638:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b463c:	e9cd 4400 	strd	r4, r4, [sp]
   b4640:	f7ff ff10 	bl	b4464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4644:	b006      	add	sp, #24
   b4646:	bd10      	pop	{r4, pc}

000b4648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b464c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4650:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4654:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4658:	4604      	mov	r4, r0
   b465a:	468b      	mov	fp, r1
   b465c:	4616      	mov	r6, r2
   b465e:	461f      	mov	r7, r3
    if (isConnected()) {
   b4660:	f7ff fef2 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b4664:	4682      	mov	sl, r0
   b4666:	2800      	cmp	r0, #0
   b4668:	d051      	beq.n	b470e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b466a:	4621      	mov	r1, r4
   b466c:	a801      	add	r0, sp, #4
   b466e:	f7ff fdcb 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4672:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4676:	69e0      	ldr	r0, [r4, #28]
   b4678:	2100      	movs	r1, #0
   b467a:	f001 fd87 	bl	b618c <memset>
        length = writeString(topic, buffer, length);
   b467e:	2305      	movs	r3, #5
   b4680:	69e2      	ldr	r2, [r4, #28]
   b4682:	4659      	mov	r1, fp
   b4684:	4620      	mov	r0, r4
   b4686:	f7ff fec3 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b468a:	1e6b      	subs	r3, r5, #1
   b468c:	2b01      	cmp	r3, #1
   b468e:	d815      	bhi.n	b46bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4690:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4692:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4694:	3101      	adds	r1, #1
   b4696:	b289      	uxth	r1, r1
   b4698:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b469a:	0a09      	lsrs	r1, r1, #8
   b469c:	5419      	strb	r1, [r3, r0]
   b469e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b46a0:	69e3      	ldr	r3, [r4, #28]
   b46a2:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b46a4:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b46a6:	3002      	adds	r0, #2
   b46a8:	5499      	strb	r1, [r3, r2]
   b46aa:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b46ac:	f1b8 0f00 	cmp.w	r8, #0
   b46b0:	d004      	beq.n	b46bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b46b2:	8c23      	ldrh	r3, [r4, #32]
   b46b4:	1c5a      	adds	r2, r3, #1
   b46b6:	8422      	strh	r2, [r4, #32]
   b46b8:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b46bc:	2100      	movs	r1, #0
   b46be:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b46c0:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b46c2:	69e2      	ldr	r2, [r4, #28]
   b46c4:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b46c6:	d90a      	bls.n	b46de <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b46c8:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b46cc:	459c      	cmp	ip, r3
   b46ce:	d906      	bls.n	b46de <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b46d0:	f816 c001 	ldrb.w	ip, [r6, r1]
   b46d4:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b46d8:	3101      	adds	r1, #1
   b46da:	b289      	uxth	r1, r1
   b46dc:	e7ef      	b.n	b46be <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b46de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b46e2:	2900      	cmp	r1, #0
   b46e4:	bf0c      	ite	eq
   b46e6:	2130      	moveq	r1, #48	; 0x30
   b46e8:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b46ea:	f1b9 0f00 	cmp.w	r9, #0
   b46ee:	d001      	beq.n	b46f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b46f0:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b46f4:	2d02      	cmp	r5, #2
   b46f6:	d10e      	bne.n	b4716 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b46f8:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b46fc:	3b05      	subs	r3, #5
   b46fe:	b29b      	uxth	r3, r3
   b4700:	4620      	mov	r0, r4
   b4702:	f7ff fe49 	bl	b4398 <_ZN4MQTT5writeEhPht>
   b4706:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4708:	a801      	add	r0, sp, #4
   b470a:	f7ff fd88 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b470e:	4650      	mov	r0, sl
   b4710:	b003      	add	sp, #12
   b4712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4716:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4718:	bf08      	it	eq
   b471a:	f041 0102 	orreq.w	r1, r1, #2
   b471e:	e7ed      	b.n	b46fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4720 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4722:	9c08      	ldr	r4, [sp, #32]
   b4724:	9403      	str	r4, [sp, #12]
   b4726:	2400      	movs	r4, #0
   b4728:	9402      	str	r4, [sp, #8]
   b472a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b472e:	9401      	str	r4, [sp, #4]
   b4730:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4734:	9400      	str	r4, [sp, #0]
   b4736:	f7ff ff87 	bl	b4648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b473a:	b004      	add	sp, #16
   b473c:	bd10      	pop	{r4, pc}

000b473e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b473e:	b530      	push	{r4, r5, lr}
   b4740:	b087      	sub	sp, #28
   b4742:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4744:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4746:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4748:	9204      	str	r2, [sp, #16]
   b474a:	f001 fd67 	bl	b621c <strlen>
   b474e:	2500      	movs	r5, #0
   b4750:	4603      	mov	r3, r0
   b4752:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4756:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b475a:	9500      	str	r5, [sp, #0]
   b475c:	4620      	mov	r0, r4
   b475e:	f7ff ffdf 	bl	b4720 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4762:	b007      	add	sp, #28
   b4764:	bd30      	pop	{r4, r5, pc}

000b4766 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4766:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4768:	4604      	mov	r4, r0
   b476a:	460e      	mov	r6, r1
    if (isConnected()) {
   b476c:	f7ff fe6c 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b4770:	4605      	mov	r5, r0
   b4772:	b1c8      	cbz	r0, b47a8 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4774:	4621      	mov	r1, r4
   b4776:	a801      	add	r0, sp, #4
   b4778:	f7ff fd46 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b477c:	69e3      	ldr	r3, [r4, #28]
   b477e:	2262      	movs	r2, #98	; 0x62
   b4780:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4782:	69e3      	ldr	r3, [r4, #28]
   b4784:	2202      	movs	r2, #2
   b4786:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4788:	69e3      	ldr	r3, [r4, #28]
   b478a:	0a32      	lsrs	r2, r6, #8
   b478c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b478e:	69e3      	ldr	r3, [r4, #28]
   b4790:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4792:	69e1      	ldr	r1, [r4, #28]
   b4794:	2204      	movs	r2, #4
   b4796:	4620      	mov	r0, r4
   b4798:	f000 ffcd 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
   b479c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b479e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b47a0:	bf18      	it	ne
   b47a2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b47a4:	f7ff fd3b 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b47a8:	4628      	mov	r0, r5
   b47aa:	b002      	add	sp, #8
   b47ac:	bd70      	pop	{r4, r5, r6, pc}

000b47ae <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b47ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b47b0:	4604      	mov	r4, r0
   b47b2:	460e      	mov	r6, r1
    if (isConnected()) {
   b47b4:	f7ff fe48 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b47b8:	4605      	mov	r5, r0
   b47ba:	b1c8      	cbz	r0, b47f0 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b47bc:	4621      	mov	r1, r4
   b47be:	a801      	add	r0, sp, #4
   b47c0:	f7ff fd22 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b47c4:	69e3      	ldr	r3, [r4, #28]
   b47c6:	2272      	movs	r2, #114	; 0x72
   b47c8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b47ca:	69e3      	ldr	r3, [r4, #28]
   b47cc:	2202      	movs	r2, #2
   b47ce:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b47d0:	69e3      	ldr	r3, [r4, #28]
   b47d2:	0a32      	lsrs	r2, r6, #8
   b47d4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b47d6:	69e3      	ldr	r3, [r4, #28]
   b47d8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b47da:	69e1      	ldr	r1, [r4, #28]
   b47dc:	2204      	movs	r2, #4
   b47de:	4620      	mov	r0, r4
   b47e0:	f000 ffa9 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
   b47e4:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b47e6:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b47e8:	bf18      	it	ne
   b47ea:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b47ec:	f7ff fd17 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b47f0:	4628      	mov	r0, r5
   b47f2:	b002      	add	sp, #8
   b47f4:	bd70      	pop	{r4, r5, r6, pc}

000b47f6 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b47f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47fa:	ed2d 8b02 	vpush	{d8}
   b47fe:	b087      	sub	sp, #28
   b4800:	af00      	add	r7, sp, #0
   b4802:	4604      	mov	r4, r0
    if (isConnected()) {
   b4804:	f7ff fe20 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b4808:	4681      	mov	r9, r0
   b480a:	b1f8      	cbz	r0, b484c <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b480c:	4621      	mov	r1, r4
   b480e:	f107 0014 	add.w	r0, r7, #20
   b4812:	f7ff fcf9 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
   b4816:	f000 f959 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b481a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b481c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4820:	4353      	muls	r3, r2
   b4822:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4824:	1a82      	subs	r2, r0, r2
   b4826:	429a      	cmp	r2, r3
   b4828:	4606      	mov	r6, r0
   b482a:	d803      	bhi.n	b4834 <_ZN4MQTT4loopEv+0x3e>
   b482c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b482e:	1a82      	subs	r2, r0, r2
   b4830:	4293      	cmp	r3, r2
   b4832:	d221      	bcs.n	b4878 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4834:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4838:	b17b      	cbz	r3, b485a <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b483a:	4620      	mov	r0, r4
   b483c:	f001 f9dc 	bl	b5bf8 <_ZN9TCPClient4stopEv>
                return false;
   b4840:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4844:	f107 0014 	add.w	r0, r7, #20
   b4848:	f7ff fce9 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b484c:	4648      	mov	r0, r9
   b484e:	371c      	adds	r7, #28
   b4850:	46bd      	mov	sp, r7
   b4852:	ecbd 8b02 	vpop	{d8}
   b4856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b485a:	69e2      	ldr	r2, [r4, #28]
   b485c:	21c0      	movs	r1, #192	; 0xc0
   b485e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4860:	69e2      	ldr	r2, [r4, #28]
   b4862:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4864:	69e1      	ldr	r1, [r4, #28]
   b4866:	2202      	movs	r2, #2
   b4868:	4620      	mov	r0, r4
   b486a:	f000 ff64 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b486e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4872:	2301      	movs	r3, #1
   b4874:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4878:	4620      	mov	r0, r4
   b487a:	f001 f963 	bl	b5b44 <_ZN9TCPClient9availableEv>
   b487e:	2800      	cmp	r0, #0
   b4880:	d0e0      	beq.n	b4844 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4882:	f107 0113 	add.w	r1, r7, #19
   b4886:	4620      	mov	r0, r4
   b4888:	f7ff fd34 	bl	b42f4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b488c:	4683      	mov	fp, r0
   b488e:	2800      	cmp	r0, #0
   b4890:	d0d8      	beq.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4892:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4894:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4896:	7819      	ldrb	r1, [r3, #0]
   b4898:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b489c:	2a30      	cmp	r2, #48	; 0x30
   b489e:	d17f      	bne.n	b49a0 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b48a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b48a4:	f1ba 0f00 	cmp.w	sl, #0
   b48a8:	d0cc      	beq.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b48aa:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b48ae:	466a      	mov	r2, sp
   b48b0:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b48b4:	eb03 020c 	add.w	r2, r3, ip
   b48b8:	7851      	ldrb	r1, [r2, #1]
   b48ba:	7895      	ldrb	r5, [r2, #2]
   b48bc:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b48c0:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b48c2:	f105 0208 	add.w	r2, r5, #8
   b48c6:	4669      	mov	r1, sp
   b48c8:	08d2      	lsrs	r2, r2, #3
   b48ca:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b48ce:	4695      	mov	sp, r2
   b48d0:	f10c 0203 	add.w	r2, ip, #3
   b48d4:	60fa      	str	r2, [r7, #12]
   b48d6:	eb03 0e02 	add.w	lr, r3, r2
   b48da:	eb0d 0205 	add.w	r2, sp, r5
   b48de:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b48e0:	f8c7 d008 	str.w	sp, [r7, #8]
   b48e4:	607a      	str	r2, [r7, #4]
   b48e6:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b48ea:	428a      	cmp	r2, r1
   b48ec:	d006      	beq.n	b48fc <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b48ee:	460a      	mov	r2, r1
   b48f0:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b48f4:	f802 8b01 	strb.w	r8, [r2], #1
   b48f8:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b48fa:	e7f4      	b.n	b48e6 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b48fc:	2200      	movs	r2, #0
   b48fe:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4900:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4904:	68f9      	ldr	r1, [r7, #12]
   b4906:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b490a:	ebab 020c 	sub.w	r2, fp, ip
   b490e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4910:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4914:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4918:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b491a:	d125      	bne.n	b4968 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b491c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4920:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4922:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4924:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4928:	f10c 0105 	add.w	r1, ip, #5
   b492c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b492e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4930:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4934:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4936:	69e3      	ldr	r3, [r4, #28]
   b4938:	2240      	movs	r2, #64	; 0x40
   b493a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b493c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b493e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4942:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4946:	69e3      	ldr	r3, [r4, #28]
   b4948:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b494c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b494e:	69e3      	ldr	r3, [r4, #28]
   b4950:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4954:	69e1      	ldr	r1, [r4, #28]
   b4956:	2204      	movs	r2, #4
   b4958:	4620      	mov	r0, r4
   b495a:	f000 feec 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b495e:	6266      	str	r6, [r4, #36]	; 0x24
   b4960:	ee18 3a10 	vmov	r3, s16
   b4964:	469d      	mov	sp, r3
   b4966:	e76d      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4968:	f1b8 0f04 	cmp.w	r8, #4
   b496c:	d115      	bne.n	b499a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b496e:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4972:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4974:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4976:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b497a:	f10c 0105 	add.w	r1, ip, #5
   b497e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4980:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4982:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4986:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4988:	69e3      	ldr	r3, [r4, #28]
   b498a:	2250      	movs	r2, #80	; 0x50
   b498c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b498e:	69e3      	ldr	r3, [r4, #28]
   b4990:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4992:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4996:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4998:	e7d5      	b.n	b4946 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b499a:	4419      	add	r1, r3
   b499c:	47d0      	blx	sl
   b499e:	e7df      	b.n	b4960 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b49a0:	2a50      	cmp	r2, #80	; 0x50
   b49a2:	d108      	bne.n	b49b6 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b49a4:	789a      	ldrb	r2, [r3, #2]
   b49a6:	78d9      	ldrb	r1, [r3, #3]
   b49a8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b49ac:	b289      	uxth	r1, r1
   b49ae:	4620      	mov	r0, r4
   b49b0:	f7ff fed9 	bl	b4766 <_ZN4MQTT14publishReleaseEt>
   b49b4:	e746      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b49b6:	2a40      	cmp	r2, #64	; 0x40
   b49b8:	d112      	bne.n	b49e0 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b49ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b49bc:	2a00      	cmp	r2, #0
   b49be:	f43f af41 	beq.w	b4844 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b49c2:	f1bb 0f04 	cmp.w	fp, #4
   b49c6:	f47f af3d 	bne.w	b4844 <_ZN4MQTT4loopEv+0x4e>
   b49ca:	f011 0f06 	tst.w	r1, #6
   b49ce:	f47f af39 	bne.w	b4844 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b49d2:	7899      	ldrb	r1, [r3, #2]
   b49d4:	78d8      	ldrb	r0, [r3, #3]
   b49d6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b49da:	b280      	uxth	r0, r0
   b49dc:	4790      	blx	r2
   b49de:	e731      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b49e0:	2a60      	cmp	r2, #96	; 0x60
   b49e2:	d108      	bne.n	b49f6 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b49e4:	789a      	ldrb	r2, [r3, #2]
   b49e6:	78d9      	ldrb	r1, [r3, #3]
   b49e8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b49ec:	b289      	uxth	r1, r1
   b49ee:	4620      	mov	r0, r4
   b49f0:	f7ff fedd 	bl	b47ae <_ZN4MQTT15publishCompleteEt>
   b49f4:	e726      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b49f6:	2a70      	cmp	r2, #112	; 0x70
   b49f8:	d0df      	beq.n	b49ba <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b49fa:	2a90      	cmp	r2, #144	; 0x90
   b49fc:	f43f af22 	beq.w	b4844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4a00:	2ac0      	cmp	r2, #192	; 0xc0
   b4a02:	d10a      	bne.n	b4a1a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4a04:	22d0      	movs	r2, #208	; 0xd0
   b4a06:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4a08:	69e3      	ldr	r3, [r4, #28]
   b4a0a:	2200      	movs	r2, #0
   b4a0c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4a0e:	69e1      	ldr	r1, [r4, #28]
   b4a10:	2202      	movs	r2, #2
   b4a12:	4620      	mov	r0, r4
   b4a14:	f000 fe8f 	bl	b5736 <_ZN9TCPClient5writeEPKhj>
   b4a18:	e714      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4a1a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4a1c:	bf04      	itt	eq
   b4a1e:	2300      	moveq	r3, #0
   b4a20:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4a24:	e70e      	b.n	b4844 <_ZN4MQTT4loopEv+0x4e>

000b4a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4a28:	4604      	mov	r4, r0
   b4a2a:	460f      	mov	r7, r1
   b4a2c:	4616      	mov	r6, r2
    if (isConnected()) {
   b4a2e:	f7ff fd0b 	bl	b4448 <_ZN4MQTT11isConnectedEv>
   b4a32:	4605      	mov	r5, r0
   b4a34:	b310      	cbz	r0, b4a7c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4a36:	4621      	mov	r1, r4
   b4a38:	a801      	add	r0, sp, #4
   b4a3a:	f7ff fbe5 	bl	b4208 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4a3e:	8c23      	ldrh	r3, [r4, #32]
   b4a40:	3301      	adds	r3, #1
   b4a42:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4a44:	b1eb      	cbz	r3, b4a82 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4a46:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4a48:	8c23      	ldrh	r3, [r4, #32]
   b4a4a:	69e2      	ldr	r2, [r4, #28]
   b4a4c:	0a1b      	lsrs	r3, r3, #8
   b4a4e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4a50:	69e3      	ldr	r3, [r4, #28]
   b4a52:	8c22      	ldrh	r2, [r4, #32]
   b4a54:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4a56:	69e2      	ldr	r2, [r4, #28]
   b4a58:	2307      	movs	r3, #7
   b4a5a:	4639      	mov	r1, r7
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	f7ff fcd7 	bl	b4410 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4a62:	69e3      	ldr	r3, [r4, #28]
   b4a64:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4a66:	3804      	subs	r0, #4
   b4a68:	b283      	uxth	r3, r0
   b4a6a:	69e2      	ldr	r2, [r4, #28]
   b4a6c:	2182      	movs	r1, #130	; 0x82
   b4a6e:	4620      	mov	r0, r4
   b4a70:	f7ff fc92 	bl	b4398 <_ZN4MQTT5writeEhPht>
   b4a74:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4a76:	a801      	add	r0, sp, #4
   b4a78:	f7ff fbd1 	bl	b421e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4a7c:	4628      	mov	r0, r5
   b4a7e:	b003      	add	sp, #12
   b4a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4a82:	2301      	movs	r3, #1
   b4a84:	e7df      	b.n	b4a46 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4a86 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4a86:	2200      	movs	r2, #0
   b4a88:	f7ff bfcd 	b.w	b4a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4a8c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <netdb_freeaddrinfo+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	689b      	ldr	r3, [r3, #8]
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	00030268 	.word	0x00030268

000b4a9c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <netdb_getaddrinfo+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	68db      	ldr	r3, [r3, #12]
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	00030268 	.word	0x00030268

000b4aac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <if_index_to_name+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	695b      	ldr	r3, [r3, #20]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	0003026c 	.word	0x0003026c

000b4abc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <HAL_RNG_GetRandomNumber+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	685b      	ldr	r3, [r3, #4]
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	00030218 	.word	0x00030218

000b4acc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	695b      	ldr	r3, [r3, #20]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030218 	.word	0x00030218

000b4adc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <hal_rtc_time_is_valid+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	00030218 	.word	0x00030218

000b4aec <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <hal_rtc_get_time+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	00030218 	.word	0x00030218

000b4afc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <os_mutex_create+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	00030248 	.word	0x00030248

000b4b0c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <os_mutex_lock+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	00030248 	.word	0x00030248

000b4b1c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <os_mutex_unlock+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030248 	.word	0x00030248

000b4b2c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <os_mutex_recursive_create+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	00030248 	.word	0x00030248

000b4b3c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <inet_inet_ntop+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	695b      	ldr	r3, [r3, #20]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	00030264 	.word	0x00030264

000b4b4c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <inet_htonl+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	6a1b      	ldr	r3, [r3, #32]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030264 	.word	0x00030264

000b4b5c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <inet_htons+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030264 	.word	0x00030264

000b4b6c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <hal_usart_write+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	68db      	ldr	r3, [r3, #12]
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	0003023c 	.word	0x0003023c

000b4b7c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <hal_usart_available+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	691b      	ldr	r3, [r3, #16]
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	0003023c 	.word	0x0003023c

000b4b8c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <hal_usart_read+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	695b      	ldr	r3, [r3, #20]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	0003023c 	.word	0x0003023c

000b4b9c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <hal_usart_peek+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	699b      	ldr	r3, [r3, #24]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	0003023c 	.word	0x0003023c

000b4bac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <hal_usart_flush+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	69db      	ldr	r3, [r3, #28]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	0003023c 	.word	0x0003023c

000b4bbc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <hal_usart_available_data_for_write+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003023c 	.word	0x0003023c

000b4bcc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <hal_usart_init_ex+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003023c 	.word	0x0003023c

000b4bdc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <sock_setsockopt+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	699b      	ldr	r3, [r3, #24]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030238 	.word	0x00030238

000b4bec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <sock_close+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	69db      	ldr	r3, [r3, #28]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030238 	.word	0x00030238

000b4bfc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <sock_connect+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6a1b      	ldr	r3, [r3, #32]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030238 	.word	0x00030238

000b4c0c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <sock_recv+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030238 	.word	0x00030238

000b4c1c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <sock_send+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030238 	.word	0x00030238

000b4c2c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <sock_socket+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030238 	.word	0x00030238

000b4c3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <HAL_USB_USART_Init+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	681b      	ldr	r3, [r3, #0]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	0003024c 	.word	0x0003024c

000b4c4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <HAL_USB_USART_Begin+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	685b      	ldr	r3, [r3, #4]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003024c 	.word	0x0003024c

000b4c5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <HAL_USB_USART_Available_Data+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	691b      	ldr	r3, [r3, #16]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003024c 	.word	0x0003024c

000b4c6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	695b      	ldr	r3, [r3, #20]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	0003024c 	.word	0x0003024c

000b4c7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <HAL_USB_USART_Receive_Data+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	699b      	ldr	r3, [r3, #24]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	0003024c 	.word	0x0003024c

000b4c8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <HAL_USB_USART_Send_Data+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	69db      	ldr	r3, [r3, #28]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	0003024c 	.word	0x0003024c

000b4c9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <HAL_USB_USART_Flush_Data+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6a1b      	ldr	r3, [r3, #32]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	0003024c 	.word	0x0003024c

000b4cac <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <LED_Signaling_Start+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	689b      	ldr	r3, [r3, #8]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030260 	.word	0x00030260

000b4cbc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <LED_Signaling_Stop+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	68db      	ldr	r3, [r3, #12]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030260 	.word	0x00030260

000b4ccc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <LED_RGB_IsOverRidden+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	699b      	ldr	r3, [r3, #24]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030260 	.word	0x00030260

000b4cdc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <log_message+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030260 	.word	0x00030260

000b4cec <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <system_mode+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	681b      	ldr	r3, [r3, #0]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030220 	.word	0x00030220

000b4cfc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <set_system_mode+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	685b      	ldr	r3, [r3, #4]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030220 	.word	0x00030220

000b4d0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <system_delay_ms+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	695b      	ldr	r3, [r3, #20]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030220 	.word	0x00030220

000b4d1c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <system_thread_get_state+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030220 	.word	0x00030220

000b4d2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b03      	ldr	r3, [pc, #12]	; (b4d3c <system_ctrl_set_app_request_handler+0x10>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d36:	9301      	str	r3, [sp, #4]
   b4d38:	bd08      	pop	{r3, pc}
   b4d3a:	0000      	.short	0x0000
   b4d3c:	00030220 	.word	0x00030220

000b4d40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b03      	ldr	r3, [pc, #12]	; (b4d50 <system_ctrl_set_result+0x10>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d4a:	9301      	str	r3, [sp, #4]
   b4d4c:	bd08      	pop	{r3, pc}
   b4d4e:	0000      	.short	0x0000
   b4d50:	00030220 	.word	0x00030220

000b4d54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <network_connect+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	685b      	ldr	r3, [r3, #4]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	00030240 	.word	0x00030240

000b4d64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <network_connecting+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	689b      	ldr	r3, [r3, #8]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030240 	.word	0x00030240

000b4d74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <network_disconnect+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	68db      	ldr	r3, [r3, #12]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030240 	.word	0x00030240

000b4d84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <network_ready+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	691b      	ldr	r3, [r3, #16]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030240 	.word	0x00030240

000b4d94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <network_on+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	695b      	ldr	r3, [r3, #20]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030240 	.word	0x00030240

000b4da4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <network_off+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	699b      	ldr	r3, [r3, #24]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030240 	.word	0x00030240

000b4db4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <network_listen+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	69db      	ldr	r3, [r3, #28]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030240 	.word	0x00030240

000b4dc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <network_listening+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a1b      	ldr	r3, [r3, #32]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030240 	.word	0x00030240

000b4dd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <network_set_listen_timeout+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030240 	.word	0x00030240

000b4de4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <network_get_listen_timeout+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030240 	.word	0x00030240

000b4df4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <network_is_on+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030240 	.word	0x00030240

000b4e04 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <network_is_off+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030240 	.word	0x00030240

000b4e14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <spark_process+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	689b      	ldr	r3, [r3, #8]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030244 	.word	0x00030244

000b4e24 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <spark_cloud_flag_connected+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	695b      	ldr	r3, [r3, #20]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030244 	.word	0x00030244

000b4e34 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <spark_sync_time_pending+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030244 	.word	0x00030244

000b4e44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030244 	.word	0x00030244

000b4e54 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <malloc+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	681b      	ldr	r3, [r3, #0]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003021c 	.word	0x0003021c

000b4e64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <free+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	685b      	ldr	r3, [r3, #4]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003021c 	.word	0x0003021c

000b4e74 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <realloc+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	689b      	ldr	r3, [r3, #8]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003021c 	.word	0x0003021c

000b4e84 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <__errno+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003021c 	.word	0x0003021c

000b4e94 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <__assert_func+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003021c 	.word	0x0003021c

000b4ea4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <newlib_impure_ptr_callback+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	0003021c 	.word	0x0003021c

000b4eb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4eb4:	2200      	movs	r2, #0
   b4eb6:	6840      	ldr	r0, [r0, #4]
   b4eb8:	4611      	mov	r1, r2
   b4eba:	f7ff bf83 	b.w	b4dc4 <network_listening>

000b4ebe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ebe:	2200      	movs	r2, #0
   b4ec0:	6840      	ldr	r0, [r0, #4]
   b4ec2:	4611      	mov	r1, r2
   b4ec4:	f7ff bf8e 	b.w	b4de4 <network_get_listen_timeout>

000b4ec8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ec8:	6840      	ldr	r0, [r0, #4]
   b4eca:	2200      	movs	r2, #0
   b4ecc:	f7ff bf82 	b.w	b4dd4 <network_set_listen_timeout>

000b4ed0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ed0:	6840      	ldr	r0, [r0, #4]
   b4ed2:	2200      	movs	r2, #0
   b4ed4:	f081 0101 	eor.w	r1, r1, #1
   b4ed8:	f7ff bf6c 	b.w	b4db4 <network_listen>

000b4edc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4edc:	2300      	movs	r3, #0
   b4ede:	6840      	ldr	r0, [r0, #4]
   b4ee0:	461a      	mov	r2, r3
   b4ee2:	4619      	mov	r1, r3
   b4ee4:	f7ff bf5e 	b.w	b4da4 <network_off>

000b4ee8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ee8:	2300      	movs	r3, #0
   b4eea:	6840      	ldr	r0, [r0, #4]
   b4eec:	461a      	mov	r2, r3
   b4eee:	4619      	mov	r1, r3
   b4ef0:	f7ff bf50 	b.w	b4d94 <network_on>

000b4ef4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4ef4:	2200      	movs	r2, #0
   b4ef6:	6840      	ldr	r0, [r0, #4]
   b4ef8:	4611      	mov	r1, r2
   b4efa:	f7ff bf43 	b.w	b4d84 <network_ready>

000b4efe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4efe:	2200      	movs	r2, #0
   b4f00:	6840      	ldr	r0, [r0, #4]
   b4f02:	4611      	mov	r1, r2
   b4f04:	f7ff bf2e 	b.w	b4d64 <network_connecting>

000b4f08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f08:	6840      	ldr	r0, [r0, #4]
   b4f0a:	2200      	movs	r2, #0
   b4f0c:	2102      	movs	r1, #2
   b4f0e:	f7ff bf31 	b.w	b4d74 <network_disconnect>

000b4f12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f12:	2300      	movs	r3, #0
   b4f14:	6840      	ldr	r0, [r0, #4]
   b4f16:	461a      	mov	r2, r3
   b4f18:	f7ff bf1c 	b.w	b4d54 <network_connect>

000b4f1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4f1c:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f1e:	2203      	movs	r2, #3
   b4f20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f22:	4a02      	ldr	r2, [pc, #8]	; (b4f2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f26:	4770      	bx	lr
   b4f28:	2003e6dc 	.word	0x2003e6dc
   b4f2c:	000b63b0 	.word	0x000b63b0

000b4f30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4f30:	4b05      	ldr	r3, [pc, #20]	; (b4f48 <_GLOBAL__sub_I_System+0x18>)
   b4f32:	2202      	movs	r2, #2
   b4f34:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4f36:	4b05      	ldr	r3, [pc, #20]	; (b4f4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4f38:	4a05      	ldr	r2, [pc, #20]	; (b4f50 <_GLOBAL__sub_I_System+0x20>)
   b4f3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4f3c:	2000      	movs	r0, #0
   b4f3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4f42:	f7ff bedb 	b.w	b4cfc <set_system_mode>
   b4f46:	bf00      	nop
   b4f48:	2003e6f0 	.word	0x2003e6f0
   b4f4c:	2003e6e4 	.word	0x2003e6e4
   b4f50:	ffff0000 	.word	0xffff0000

000b4f54 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b4f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b4f58:	1e93      	subs	r3, r2, #2
{
   b4f5a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b4f5c:	2b22      	cmp	r3, #34	; 0x22
   b4f5e:	f04f 0300 	mov.w	r3, #0
{
   b4f62:	460d      	mov	r5, r1
   b4f64:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b4f66:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b4f6a:	d927      	bls.n	b4fbc <ltoa+0x68>

      if (10 == base && N < 0L)
   b4f6c:	2800      	cmp	r0, #0
   b4f6e:	da2a      	bge.n	b4fc6 <ltoa+0x72>
      {
            *head++ = '-';
   b4f70:	462e      	mov	r6, r5
   b4f72:	232d      	movs	r3, #45	; 0x2d
   b4f74:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b4f78:	4240      	negs	r0, r0
   b4f7a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b4f7c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b4f80:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b4f84:	4622      	mov	r2, r4
   b4f86:	4601      	mov	r1, r0
   b4f88:	a801      	add	r0, sp, #4
   b4f8a:	f001 f8dd 	bl	b6148 <ldiv>
   b4f8e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b4f90:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b4f92:	2b09      	cmp	r3, #9
   b4f94:	bfcc      	ite	gt
   b4f96:	2237      	movgt	r2, #55	; 0x37
   b4f98:	2230      	movle	r2, #48	; 0x30
   b4f9a:	fa52 f383 	uxtab	r3, r2, r3
   b4f9e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b4fa2:	f108 0801 	add.w	r8, r8, #1
   b4fa6:	2800      	cmp	r0, #0
   b4fa8:	d1ec      	bne.n	b4f84 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b4faa:	4642      	mov	r2, r8
   b4fac:	1c79      	adds	r1, r7, #1
   b4fae:	4630      	mov	r0, r6
   b4fb0:	f001 f8de 	bl	b6170 <memcpy>
      return str;
}
   b4fb4:	4628      	mov	r0, r5
   b4fb6:	b00c      	add	sp, #48	; 0x30
   b4fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b4fbc:	2a0a      	cmp	r2, #10
   b4fbe:	d0d5      	beq.n	b4f6c <ltoa+0x18>
      if (uarg)
   b4fc0:	b118      	cbz	r0, b4fca <ltoa+0x76>
   b4fc2:	462e      	mov	r6, r5
   b4fc4:	e7da      	b.n	b4f7c <ltoa+0x28>
   b4fc6:	240a      	movs	r4, #10
   b4fc8:	e7fa      	b.n	b4fc0 <ltoa+0x6c>
      else  *tail-- = '0';
   b4fca:	2330      	movs	r3, #48	; 0x30
   b4fcc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b4fd0:	462e      	mov	r6, r5
   b4fd2:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b4fd6:	f04f 0802 	mov.w	r8, #2
   b4fda:	e7e6      	b.n	b4faa <ltoa+0x56>

000b4fdc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4fdc:	b510      	push	{r4, lr}
   b4fde:	4604      	mov	r4, r0
{
	free(buffer);
   b4fe0:	6800      	ldr	r0, [r0, #0]
   b4fe2:	f7ff ff3f 	bl	b4e64 <free>
}
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	bd10      	pop	{r4, pc}

000b4fea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4fea:	b510      	push	{r4, lr}
   b4fec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4fee:	6800      	ldr	r0, [r0, #0]
   b4ff0:	b108      	cbz	r0, b4ff6 <_ZN6String10invalidateEv+0xc>
   b4ff2:	f7ff ff37 	bl	b4e64 <free>
	buffer = NULL;
   b4ff6:	2300      	movs	r3, #0
	capacity = len = 0;
   b4ff8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4ffc:	6023      	str	r3, [r4, #0]
}
   b4ffe:	bd10      	pop	{r4, pc}

000b5000 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5000:	b538      	push	{r3, r4, r5, lr}
   b5002:	4604      	mov	r4, r0
   b5004:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5006:	6800      	ldr	r0, [r0, #0]
   b5008:	3101      	adds	r1, #1
   b500a:	f7ff ff33 	bl	b4e74 <realloc>
	if (newbuffer) {
   b500e:	b110      	cbz	r0, b5016 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5010:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5014:	2001      	movs	r0, #1
	}
	return 0;
}
   b5016:	bd38      	pop	{r3, r4, r5, pc}

000b5018 <_ZN6String7reserveEj>:
{
   b5018:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b501a:	6803      	ldr	r3, [r0, #0]
{
   b501c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b501e:	b123      	cbz	r3, b502a <_ZN6String7reserveEj+0x12>
   b5020:	6843      	ldr	r3, [r0, #4]
   b5022:	428b      	cmp	r3, r1
   b5024:	d301      	bcc.n	b502a <_ZN6String7reserveEj+0x12>
   b5026:	2001      	movs	r0, #1
}
   b5028:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b502a:	4620      	mov	r0, r4
   b502c:	f7ff ffe8 	bl	b5000 <_ZN6String12changeBufferEj>
   b5030:	2800      	cmp	r0, #0
   b5032:	d0f9      	beq.n	b5028 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5034:	68a3      	ldr	r3, [r4, #8]
   b5036:	2b00      	cmp	r3, #0
   b5038:	d1f5      	bne.n	b5026 <_ZN6String7reserveEj+0xe>
   b503a:	6822      	ldr	r2, [r4, #0]
   b503c:	7013      	strb	r3, [r2, #0]
   b503e:	e7f2      	b.n	b5026 <_ZN6String7reserveEj+0xe>

000b5040 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5040:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5042:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5044:	4611      	mov	r1, r2
   b5046:	9201      	str	r2, [sp, #4]
{
   b5048:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b504a:	f7ff ffe5 	bl	b5018 <_ZN6String7reserveEj>
   b504e:	9a01      	ldr	r2, [sp, #4]
   b5050:	b928      	cbnz	r0, b505e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5052:	4620      	mov	r0, r4
   b5054:	f7ff ffc9 	bl	b4fea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5058:	4620      	mov	r0, r4
   b505a:	b003      	add	sp, #12
   b505c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b505e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5060:	4629      	mov	r1, r5
   b5062:	6820      	ldr	r0, [r4, #0]
   b5064:	f001 f884 	bl	b6170 <memcpy>
	buffer[len] = 0;
   b5068:	6822      	ldr	r2, [r4, #0]
   b506a:	68a3      	ldr	r3, [r4, #8]
   b506c:	2100      	movs	r1, #0
   b506e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5070:	e7f2      	b.n	b5058 <_ZN6String4copyEPKcj+0x18>

000b5072 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5072:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5074:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5076:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b507a:	4604      	mov	r4, r0
	len = 0;
   b507c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b507e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5080:	b141      	cbz	r1, b5094 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5082:	4608      	mov	r0, r1
   b5084:	9101      	str	r1, [sp, #4]
   b5086:	f001 f8c9 	bl	b621c <strlen>
   b508a:	9901      	ldr	r1, [sp, #4]
   b508c:	4602      	mov	r2, r0
   b508e:	4620      	mov	r0, r4
   b5090:	f7ff ffd6 	bl	b5040 <_ZN6String4copyEPKcj>
}
   b5094:	4620      	mov	r0, r4
   b5096:	b002      	add	sp, #8
   b5098:	bd10      	pop	{r4, pc}

000b509a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b509a:	b513      	push	{r0, r1, r4, lr}
   b509c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b509e:	b159      	cbz	r1, b50b8 <_ZN6StringaSEPKc+0x1e>
   b50a0:	4608      	mov	r0, r1
   b50a2:	9101      	str	r1, [sp, #4]
   b50a4:	f001 f8ba 	bl	b621c <strlen>
   b50a8:	9901      	ldr	r1, [sp, #4]
   b50aa:	4602      	mov	r2, r0
   b50ac:	4620      	mov	r0, r4
   b50ae:	f7ff ffc7 	bl	b5040 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b50b2:	4620      	mov	r0, r4
   b50b4:	b002      	add	sp, #8
   b50b6:	bd10      	pop	{r4, pc}
	else invalidate();
   b50b8:	f7ff ff97 	bl	b4fea <_ZN6String10invalidateEv>
   b50bc:	e7f9      	b.n	b50b2 <_ZN6StringaSEPKc+0x18>

000b50be <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b50be:	b510      	push	{r4, lr}
   b50c0:	4604      	mov	r4, r0
   b50c2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b50c4:	2300      	movs	r3, #0
	capacity = 0;
   b50c6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b50ca:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b50cc:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b50ce:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b50d0:	a901      	add	r1, sp, #4
   b50d2:	f7ff ff3f 	bl	b4f54 <ltoa>
	*this = buf;
   b50d6:	a901      	add	r1, sp, #4
   b50d8:	4620      	mov	r0, r4
   b50da:	f7ff ffde 	bl	b509a <_ZN6StringaSEPKc>
}
   b50de:	4620      	mov	r0, r4
   b50e0:	b00a      	add	sp, #40	; 0x28
   b50e2:	bd10      	pop	{r4, pc}

000b50e4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b50e4:	b570      	push	{r4, r5, r6, lr}
   b50e6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b50e8:	460e      	mov	r6, r1
   b50ea:	b909      	cbnz	r1, b50f0 <_ZN6String6concatEPKcj+0xc>
   b50ec:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b50ee:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b50f0:	b16a      	cbz	r2, b510e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b50f2:	6884      	ldr	r4, [r0, #8]
   b50f4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b50f6:	4621      	mov	r1, r4
   b50f8:	f7ff ff8e 	bl	b5018 <_ZN6String7reserveEj>
   b50fc:	2800      	cmp	r0, #0
   b50fe:	d0f5      	beq.n	b50ec <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5100:	6828      	ldr	r0, [r5, #0]
   b5102:	68ab      	ldr	r3, [r5, #8]
   b5104:	4631      	mov	r1, r6
   b5106:	4418      	add	r0, r3
   b5108:	f001 f880 	bl	b620c <strcpy>
	len = newlen;
   b510c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b510e:	2001      	movs	r0, #1
   b5110:	e7ed      	b.n	b50ee <_ZN6String6concatEPKcj+0xa>

000b5112 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5112:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5114:	688a      	ldr	r2, [r1, #8]
   b5116:	6809      	ldr	r1, [r1, #0]
{
   b5118:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b511a:	f7ff ffe3 	bl	b50e4 <_ZN6String6concatEPKcj>
   b511e:	b910      	cbnz	r0, b5126 <_ZplRK15StringSumHelperRK6String+0x14>
   b5120:	4620      	mov	r0, r4
   b5122:	f7ff ff62 	bl	b4fea <_ZN6String10invalidateEv>
	return a;
}
   b5126:	4620      	mov	r0, r4
   b5128:	bd10      	pop	{r4, pc}

000b512a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b512a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b512c:	6843      	ldr	r3, [r0, #4]
   b512e:	3b01      	subs	r3, #1
    {
   b5130:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5132:	6043      	str	r3, [r0, #4]
   b5134:	b963      	cbnz	r3, b5150 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5136:	6803      	ldr	r3, [r0, #0]
   b5138:	689b      	ldr	r3, [r3, #8]
   b513a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b513c:	68a3      	ldr	r3, [r4, #8]
   b513e:	3b01      	subs	r3, #1
   b5140:	60a3      	str	r3, [r4, #8]
   b5142:	b92b      	cbnz	r3, b5150 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5144:	6823      	ldr	r3, [r4, #0]
   b5146:	4620      	mov	r0, r4
   b5148:	68db      	ldr	r3, [r3, #12]
        }
    }
   b514a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b514e:	4718      	bx	r3
    }
   b5150:	bd10      	pop	{r4, pc}
	...

000b5154 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5154:	4802      	ldr	r0, [pc, #8]	; (b5160 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5156:	2300      	movs	r3, #0
   b5158:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b515a:	f7ff bce7 	b.w	b4b2c <os_mutex_recursive_create>
   b515e:	bf00      	nop
   b5160:	2003e6f4 	.word	0x2003e6f4

000b5164 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5166:	4606      	mov	r6, r0
   b5168:	460d      	mov	r5, r1
  size_t n = 0;
   b516a:	188f      	adds	r7, r1, r2
   b516c:	2400      	movs	r4, #0
  while (size--) {
   b516e:	42bd      	cmp	r5, r7
   b5170:	d00c      	beq.n	b518c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5172:	6833      	ldr	r3, [r6, #0]
   b5174:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5178:	689b      	ldr	r3, [r3, #8]
   b517a:	4630      	mov	r0, r6
   b517c:	4798      	blx	r3
     if (chunk>=0)
   b517e:	1e03      	subs	r3, r0, #0
   b5180:	db01      	blt.n	b5186 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5182:	441c      	add	r4, r3
  while (size--) {
   b5184:	e7f3      	b.n	b516e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5186:	2c00      	cmp	r4, #0
   b5188:	bf08      	it	eq
   b518a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b518c:	4620      	mov	r0, r4
   b518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5190 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5190:	b513      	push	{r0, r1, r4, lr}
   b5192:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5194:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5196:	b159      	cbz	r1, b51b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5198:	9101      	str	r1, [sp, #4]
   b519a:	f001 f83f 	bl	b621c <strlen>
   b519e:	6823      	ldr	r3, [r4, #0]
   b51a0:	9901      	ldr	r1, [sp, #4]
   b51a2:	68db      	ldr	r3, [r3, #12]
   b51a4:	4602      	mov	r2, r0
   b51a6:	4620      	mov	r0, r4
    }
   b51a8:	b002      	add	sp, #8
   b51aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b51ae:	4718      	bx	r3
    }
   b51b0:	b002      	add	sp, #8
   b51b2:	bd10      	pop	{r4, pc}

000b51b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b51b4:	6803      	ldr	r3, [r0, #0]
   b51b6:	689b      	ldr	r3, [r3, #8]
   b51b8:	4718      	bx	r3

000b51ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b51ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b51bc:	210d      	movs	r1, #13
{
   b51be:	4605      	mov	r5, r0
  size_t n = print('\r');
   b51c0:	f7ff fff8 	bl	b51b4 <_ZN5Print5printEc>
  n += print('\n');
   b51c4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b51c6:	4604      	mov	r4, r0
  n += print('\n');
   b51c8:	4628      	mov	r0, r5
   b51ca:	f7ff fff3 	bl	b51b4 <_ZN5Print5printEc>
  return n;
}
   b51ce:	4420      	add	r0, r4
   b51d0:	bd38      	pop	{r3, r4, r5, pc}

000b51d2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b51d2:	b538      	push	{r3, r4, r5, lr}
   b51d4:	4605      	mov	r5, r0
  return write(str);
   b51d6:	f7ff ffdb 	bl	b5190 <_ZN5Print5writeEPKc>
   b51da:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b51dc:	4628      	mov	r0, r5
   b51de:	f7ff ffec 	bl	b51ba <_ZN5Print7printlnEv>
  return n;
}
   b51e2:	4420      	add	r0, r4
   b51e4:	bd38      	pop	{r3, r4, r5, pc}

000b51e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51e6:	b530      	push	{r4, r5, lr}
   b51e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51ea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51ec:	2a01      	cmp	r2, #1
  *str = '\0';
   b51ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51f2:	bf98      	it	ls
   b51f4:	220a      	movls	r2, #10
   b51f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51f8:	460d      	mov	r5, r1
   b51fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51fe:	fb01 5312 	mls	r3, r1, r2, r5
   b5202:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5206:	2b09      	cmp	r3, #9
   b5208:	bf94      	ite	ls
   b520a:	3330      	addls	r3, #48	; 0x30
   b520c:	3337      	addhi	r3, #55	; 0x37
   b520e:	b2db      	uxtb	r3, r3
  } while(n);
   b5210:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5212:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5216:	d9ef      	bls.n	b51f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5218:	4621      	mov	r1, r4
   b521a:	f7ff ffb9 	bl	b5190 <_ZN5Print5writeEPKc>
}
   b521e:	b00b      	add	sp, #44	; 0x2c
   b5220:	bd30      	pop	{r4, r5, pc}
	...

000b5224 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5224:	4b01      	ldr	r3, [pc, #4]	; (b522c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5226:	4a02      	ldr	r2, [pc, #8]	; (b5230 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5228:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b522a:	4770      	bx	lr
   b522c:	2003e6f8 	.word	0x2003e6f8
   b5230:	000b63ec 	.word	0x000b63ec

000b5234 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5234:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5236:	2000      	movs	r0, #0
   b5238:	f7ff fdfc 	bl	b4e34 <spark_sync_time_pending>
   b523c:	b128      	cbz	r0, b524a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b523e:	f7ff fdf1 	bl	b4e24 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5242:	f080 0001 	eor.w	r0, r0, #1
   b5246:	b2c0      	uxtb	r0, r0
    }
   b5248:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b524a:	2001      	movs	r0, #1
   b524c:	e7fc      	b.n	b5248 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b524e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b524e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5250:	2000      	movs	r0, #0
   b5252:	f7ff fc43 	bl	b4adc <hal_rtc_time_is_valid>
    if (rtcstate)
   b5256:	4604      	mov	r4, r0
   b5258:	b9a0      	cbnz	r0, b5284 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b525a:	f7ff fd47 	bl	b4cec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b525e:	2801      	cmp	r0, #1
   b5260:	d110      	bne.n	b5284 <_ZN9TimeClass7isValidEv+0x36>
   b5262:	4620      	mov	r0, r4
   b5264:	f7ff fd5a 	bl	b4d1c <system_thread_get_state>
   b5268:	b960      	cbnz	r0, b5284 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b526a:	f7ff ffe3 	bl	b5234 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b526e:	b910      	cbnz	r0, b5276 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5270:	f7ff fdd0 	bl	b4e14 <spark_process>
        while (_while() && !_condition()) {
   b5274:	e7f9      	b.n	b526a <_ZN9TimeClass7isValidEv+0x1c>
   b5276:	f7ff ffdd 	bl	b5234 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b527e:	2000      	movs	r0, #0
   b5280:	f7ff bc2c 	b.w	b4adc <hal_rtc_time_is_valid>
}
   b5284:	4620      	mov	r0, r4
   b5286:	bd10      	pop	{r4, pc}

000b5288 <_ZN9TimeClass3nowEv>:
{
   b5288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b528a:	f7ff ffe0 	bl	b524e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b528e:	2210      	movs	r2, #16
   b5290:	2100      	movs	r1, #0
   b5292:	4668      	mov	r0, sp
   b5294:	f000 ff7a 	bl	b618c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5298:	2100      	movs	r1, #0
   b529a:	4668      	mov	r0, sp
   b529c:	f7ff fc26 	bl	b4aec <hal_rtc_get_time>
}
   b52a0:	9800      	ldr	r0, [sp, #0]
   b52a2:	b005      	add	sp, #20
   b52a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b52a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b52a8:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b52aa:	681a      	ldr	r2, [r3, #0]
   b52ac:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b52ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b52b0:	4770      	bx	lr
   b52b2:	bf00      	nop
   b52b4:	2003e600 	.word	0x2003e600
   b52b8:	2003e6fc 	.word	0x2003e6fc

000b52bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b52bc:	2100      	movs	r1, #0
   b52be:	f7ff bd25 	b.w	b4d0c <system_delay_ms>
	...

000b52c4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b52c4:	b510      	push	{r4, lr}
   b52c6:	4b04      	ldr	r3, [pc, #16]	; (b52d8 <_ZN9TCPClientD1Ev+0x14>)
   b52c8:	6003      	str	r3, [r0, #0]
   b52ca:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b52cc:	6980      	ldr	r0, [r0, #24]
   b52ce:	b108      	cbz	r0, b52d4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b52d0:	f7ff ff2b 	bl	b512a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b52d4:	4620      	mov	r0, r4
   b52d6:	bd10      	pop	{r4, pc}
   b52d8:	000b64bc 	.word	0x000b64bc

000b52dc <_ZN9TCPClientD0Ev>:
   b52dc:	b510      	push	{r4, lr}
   b52de:	4604      	mov	r4, r0
   b52e0:	f7ff fff0 	bl	b52c4 <_ZN9TCPClientD1Ev>
   b52e4:	4620      	mov	r0, r4
   b52e6:	211c      	movs	r1, #28
   b52e8:	f7fe fed9 	bl	b409e <_ZdlPvj>
   b52ec:	4620      	mov	r0, r4
   b52ee:	bd10      	pop	{r4, pc}

000b52f0 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b52f0:	b510      	push	{r4, lr}
   b52f2:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b52f4:	f7ff fcea 	bl	b4ccc <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b52f8:	4284      	cmp	r4, r0
   b52fa:	d008      	beq.n	b530e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b52fc:	b11c      	cbz	r4, b5306 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b52fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b5302:	f7ff bcd3 	b.w	b4cac <LED_Signaling_Start>
}
   b5306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b530a:	f7ff bcd7 	b.w	b4cbc <LED_Signaling_Stop>
}
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5310:	4b01      	ldr	r3, [pc, #4]	; (b5318 <_GLOBAL__sub_I_RGB+0x8>)
   b5312:	2200      	movs	r2, #0
   b5314:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5316:	4770      	bx	lr
   b5318:	2003e700 	.word	0x2003e700

000b531c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b531c:	4b01      	ldr	r3, [pc, #4]	; (b5324 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b531e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5320:	4770      	bx	lr
   b5322:	bf00      	nop
   b5324:	2003e604 	.word	0x2003e604

000b5328 <serialEventRun>:
{
   b5328:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b532a:	4b0b      	ldr	r3, [pc, #44]	; (b5358 <serialEventRun+0x30>)
   b532c:	b143      	cbz	r3, b5340 <serialEventRun+0x18>
   b532e:	f000 f97d 	bl	b562c <_Z16_fetch_usbserialv>
   b5332:	6803      	ldr	r3, [r0, #0]
   b5334:	691b      	ldr	r3, [r3, #16]
   b5336:	4798      	blx	r3
   b5338:	2800      	cmp	r0, #0
   b533a:	dd01      	ble.n	b5340 <serialEventRun+0x18>
        serialEvent();
   b533c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5340:	4b06      	ldr	r3, [pc, #24]	; (b535c <serialEventRun+0x34>)
   b5342:	b143      	cbz	r3, b5356 <serialEventRun+0x2e>
   b5344:	f000 fdc2 	bl	b5ecc <_Z22__fetch_global_Serial1v>
   b5348:	6803      	ldr	r3, [r0, #0]
   b534a:	691b      	ldr	r3, [r3, #16]
   b534c:	4798      	blx	r3
   b534e:	2800      	cmp	r0, #0
   b5350:	dd01      	ble.n	b5356 <serialEventRun+0x2e>
        serialEvent1();
   b5352:	f3af 8000 	nop.w
}
   b5356:	bd08      	pop	{r3, pc}
	...

000b5360 <_post_loop>:
{
   b5360:	b508      	push	{r3, lr}
	serialEventRun();
   b5362:	f7ff ffe1 	bl	b5328 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5366:	f7ff fbb1 	bl	b4acc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b536a:	4b01      	ldr	r3, [pc, #4]	; (b5370 <_post_loop+0x10>)
   b536c:	6018      	str	r0, [r3, #0]
}
   b536e:	bd08      	pop	{r3, pc}
   b5370:	2003e758 	.word	0x2003e758

000b5374 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5374:	4805      	ldr	r0, [pc, #20]	; (b538c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5376:	4a06      	ldr	r2, [pc, #24]	; (b5390 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5378:	4906      	ldr	r1, [pc, #24]	; (b5394 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b537a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b537c:	1a12      	subs	r2, r2, r0
   b537e:	f000 fef7 	bl	b6170 <memcpy>
    __backup_sram_signature = signature;
   b5382:	4b05      	ldr	r3, [pc, #20]	; (b5398 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5384:	4a05      	ldr	r2, [pc, #20]	; (b539c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5386:	601a      	str	r2, [r3, #0]
}
   b5388:	bd08      	pop	{r3, pc}
   b538a:	bf00      	nop
   b538c:	2003f400 	.word	0x2003f400
   b5390:	2003f404 	.word	0x2003f404
   b5394:	000b6754 	.word	0x000b6754
   b5398:	2003f400 	.word	0x2003f400
   b539c:	9a271c1e 	.word	0x9a271c1e

000b53a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b53a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53a2:	2300      	movs	r3, #0
   b53a4:	9300      	str	r3, [sp, #0]
   b53a6:	461a      	mov	r2, r3
   b53a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53ac:	f7ff fcc8 	bl	b4d40 <system_ctrl_set_result>
}
   b53b0:	b003      	add	sp, #12
   b53b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53ba:	8843      	ldrh	r3, [r0, #2]
   b53bc:	2b0a      	cmp	r3, #10
   b53be:	d008      	beq.n	b53d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53c0:	2b50      	cmp	r3, #80	; 0x50
   b53c2:	d10b      	bne.n	b53dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53c4:	4b09      	ldr	r3, [pc, #36]	; (b53ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53c6:	681b      	ldr	r3, [r3, #0]
   b53c8:	b14b      	cbz	r3, b53de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53ca:	b003      	add	sp, #12
   b53cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53d2:	f7ff ffe5 	bl	b53a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53d6:	b003      	add	sp, #12
   b53d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53dc:	2300      	movs	r3, #0
   b53de:	9300      	str	r3, [sp, #0]
   b53e0:	461a      	mov	r2, r3
   b53e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53e6:	f7ff fcab 	bl	b4d40 <system_ctrl_set_result>
}
   b53ea:	e7f4      	b.n	b53d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53ec:	2003e714 	.word	0x2003e714

000b53f0 <module_user_init_hook>:
{
   b53f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b53f2:	4812      	ldr	r0, [pc, #72]	; (b543c <module_user_init_hook+0x4c>)
   b53f4:	2100      	movs	r1, #0
   b53f6:	f7ff fd55 	bl	b4ea4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b53fa:	4b11      	ldr	r3, [pc, #68]	; (b5440 <module_user_init_hook+0x50>)
   b53fc:	681a      	ldr	r2, [r3, #0]
   b53fe:	4b11      	ldr	r3, [pc, #68]	; (b5444 <module_user_init_hook+0x54>)
   b5400:	429a      	cmp	r2, r3
   b5402:	4b11      	ldr	r3, [pc, #68]	; (b5448 <module_user_init_hook+0x58>)
   b5404:	bf0c      	ite	eq
   b5406:	2201      	moveq	r2, #1
   b5408:	2200      	movne	r2, #0
   b540a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b540c:	d001      	beq.n	b5412 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b540e:	f7ff ffb1 	bl	b5374 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5412:	f7ff fb53 	bl	b4abc <HAL_RNG_GetRandomNumber>
   b5416:	4604      	mov	r4, r0
    srand(seed);
   b5418:	f000 fec0 	bl	b619c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b541c:	4b0b      	ldr	r3, [pc, #44]	; (b544c <module_user_init_hook+0x5c>)
   b541e:	b113      	cbz	r3, b5426 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5420:	4620      	mov	r0, r4
   b5422:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5426:	2100      	movs	r1, #0
   b5428:	4808      	ldr	r0, [pc, #32]	; (b544c <module_user_init_hook+0x5c>)
   b542a:	f7ff fd0b 	bl	b4e44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5432:	4807      	ldr	r0, [pc, #28]	; (b5450 <module_user_init_hook+0x60>)
   b5434:	2100      	movs	r1, #0
   b5436:	f7ff bc79 	b.w	b4d2c <system_ctrl_set_app_request_handler>
   b543a:	bf00      	nop
   b543c:	000b531d 	.word	0x000b531d
   b5440:	2003f400 	.word	0x2003f400
   b5444:	9a271c1e 	.word	0x9a271c1e
   b5448:	2003e710 	.word	0x2003e710
   b544c:	00000000 	.word	0x00000000
   b5450:	000b53b9 	.word	0x000b53b9

000b5454 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5454:	4770      	bx	lr

000b5456 <_ZN9IPAddressD0Ev>:
   b5456:	b510      	push	{r4, lr}
   b5458:	2118      	movs	r1, #24
   b545a:	4604      	mov	r4, r0
   b545c:	f7fe fe1f 	bl	b409e <_ZdlPvj>
   b5460:	4620      	mov	r0, r4
   b5462:	bd10      	pop	{r4, pc}

000b5464 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5464:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5466:	7d03      	ldrb	r3, [r0, #20]
   b5468:	2b06      	cmp	r3, #6
{
   b546a:	b08d      	sub	sp, #52	; 0x34
   b546c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b546e:	f100 0704 	add.w	r7, r0, #4
   b5472:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5476:	d012      	beq.n	b549e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5478:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b547c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5480:	220a      	movs	r2, #10
   b5482:	4630      	mov	r0, r6
   b5484:	f7ff feaf 	bl	b51e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5488:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b548a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b548c:	d019      	beq.n	b54c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b548e:	2c00      	cmp	r4, #0
   b5490:	d0f4      	beq.n	b547c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5492:	212e      	movs	r1, #46	; 0x2e
   b5494:	4630      	mov	r0, r6
   b5496:	f7ff fe8d 	bl	b51b4 <_ZN5Print5printEc>
   b549a:	4404      	add	r4, r0
   b549c:	e7ee      	b.n	b547c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b549e:	232f      	movs	r3, #47	; 0x2f
   b54a0:	466a      	mov	r2, sp
   b54a2:	4639      	mov	r1, r7
   b54a4:	200a      	movs	r0, #10
		buf[0] = 0;
   b54a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54aa:	f7ff fb47 	bl	b4b3c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b54ae:	4668      	mov	r0, sp
   b54b0:	f000 feb4 	bl	b621c <strlen>
   b54b4:	6833      	ldr	r3, [r6, #0]
   b54b6:	4602      	mov	r2, r0
   b54b8:	68db      	ldr	r3, [r3, #12]
   b54ba:	4669      	mov	r1, sp
   b54bc:	4630      	mov	r0, r6
   b54be:	4798      	blx	r3
   b54c0:	4604      	mov	r4, r0
    }
    return n;
}
   b54c2:	4620      	mov	r0, r4
   b54c4:	b00d      	add	sp, #52	; 0x34
   b54c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b54c8:	b510      	push	{r4, lr}
   b54ca:	4b05      	ldr	r3, [pc, #20]	; (b54e0 <_ZN9IPAddressC1Ev+0x18>)
   b54cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b54ce:	2211      	movs	r2, #17
   b54d0:	f840 3b04 	str.w	r3, [r0], #4
   b54d4:	2100      	movs	r1, #0
   b54d6:	f000 fe59 	bl	b618c <memset>
}
   b54da:	4620      	mov	r0, r4
   b54dc:	bd10      	pop	{r4, pc}
   b54de:	bf00      	nop
   b54e0:	000b6414 	.word	0x000b6414

000b54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54e4:	4603      	mov	r3, r0
   b54e6:	4a07      	ldr	r2, [pc, #28]	; (b5504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54e8:	b510      	push	{r4, lr}
   b54ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54ee:	f101 0210 	add.w	r2, r1, #16
   b54f2:	f851 4b04 	ldr.w	r4, [r1], #4
   b54f6:	f843 4b04 	str.w	r4, [r3], #4
   b54fa:	4291      	cmp	r1, r2
   b54fc:	d1f9      	bne.n	b54f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b54fe:	780a      	ldrb	r2, [r1, #0]
   b5500:	701a      	strb	r2, [r3, #0]
}
   b5502:	bd10      	pop	{r4, pc}
   b5504:	000b6414 	.word	0x000b6414

000b5508 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5508:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b550a:	2b04      	cmp	r3, #4
   b550c:	d104      	bne.n	b5518 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b550e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5510:	3800      	subs	r0, #0
   b5512:	bf18      	it	ne
   b5514:	2001      	movne	r0, #1
   b5516:	4770      	bx	lr
    } else if (version() == 6) {
   b5518:	2b06      	cmp	r3, #6
   b551a:	d107      	bne.n	b552c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b551c:	6843      	ldr	r3, [r0, #4]
   b551e:	b93b      	cbnz	r3, b5530 <_ZNK9IPAddresscvbEv+0x28>
   b5520:	6883      	ldr	r3, [r0, #8]
   b5522:	b92b      	cbnz	r3, b5530 <_ZNK9IPAddresscvbEv+0x28>
   b5524:	68c3      	ldr	r3, [r0, #12]
   b5526:	b91b      	cbnz	r3, b5530 <_ZNK9IPAddresscvbEv+0x28>
   b5528:	6900      	ldr	r0, [r0, #16]
   b552a:	e7f1      	b.n	b5510 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b552c:	2000      	movs	r0, #0
   b552e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5530:	2001      	movs	r0, #1
}
   b5532:	4770      	bx	lr

000b5534 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5534:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5536:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b553a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b553e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5542:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5546:	2304      	movs	r3, #4
   b5548:	6041      	str	r1, [r0, #4]
   b554a:	7503      	strb	r3, [r0, #20]
}
   b554c:	bd10      	pop	{r4, pc}
	...

000b5550 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5550:	b507      	push	{r0, r1, r2, lr}
   b5552:	4b06      	ldr	r3, [pc, #24]	; (b556c <_ZN9IPAddressC1EPKh+0x1c>)
   b5554:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5556:	78cb      	ldrb	r3, [r1, #3]
   b5558:	9300      	str	r3, [sp, #0]
   b555a:	788b      	ldrb	r3, [r1, #2]
   b555c:	784a      	ldrb	r2, [r1, #1]
   b555e:	7809      	ldrb	r1, [r1, #0]
   b5560:	f7ff ffe8 	bl	b5534 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5564:	b003      	add	sp, #12
   b5566:	f85d fb04 	ldr.w	pc, [sp], #4
   b556a:	bf00      	nop
   b556c:	000b6414 	.word	0x000b6414

000b5570 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5570:	7441      	strb	r1, [r0, #17]
}
   b5572:	4770      	bx	lr

000b5574 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5574:	4770      	bx	lr

000b5576 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5576:	4770      	bx	lr

000b5578 <_ZN9USBSerial4readEv>:
{
   b5578:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b557a:	2100      	movs	r1, #0
   b557c:	7c00      	ldrb	r0, [r0, #16]
   b557e:	f7ff fb7d 	bl	b4c7c <HAL_USB_USART_Receive_Data>
}
   b5582:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5586:	bd08      	pop	{r3, pc}

000b5588 <_ZN9USBSerial4peekEv>:
{
   b5588:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b558a:	2101      	movs	r1, #1
   b558c:	7c00      	ldrb	r0, [r0, #16]
   b558e:	f7ff fb75 	bl	b4c7c <HAL_USB_USART_Receive_Data>
}
   b5592:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5596:	bd08      	pop	{r3, pc}

000b5598 <_ZN9USBSerial17availableForWriteEv>:
{
   b5598:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b559a:	7c00      	ldrb	r0, [r0, #16]
   b559c:	f7ff fb66 	bl	b4c6c <HAL_USB_USART_Available_Data_For_Write>
}
   b55a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55a4:	bd08      	pop	{r3, pc}

000b55a6 <_ZN9USBSerial9availableEv>:
{
   b55a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b55a8:	7c00      	ldrb	r0, [r0, #16]
   b55aa:	f7ff fb57 	bl	b4c5c <HAL_USB_USART_Available_Data>
}
   b55ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55b2:	bd08      	pop	{r3, pc}

000b55b4 <_ZN9USBSerial5writeEh>:
{
   b55b4:	b513      	push	{r0, r1, r4, lr}
   b55b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55b8:	7c00      	ldrb	r0, [r0, #16]
{
   b55ba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55bc:	f7ff fb56 	bl	b4c6c <HAL_USB_USART_Available_Data_For_Write>
   b55c0:	2800      	cmp	r0, #0
   b55c2:	9901      	ldr	r1, [sp, #4]
   b55c4:	dc01      	bgt.n	b55ca <_ZN9USBSerial5writeEh+0x16>
   b55c6:	7c60      	ldrb	r0, [r4, #17]
   b55c8:	b120      	cbz	r0, b55d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b55ca:	7c20      	ldrb	r0, [r4, #16]
   b55cc:	f7ff fb5e 	bl	b4c8c <HAL_USB_USART_Send_Data>
   b55d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b55d4:	b002      	add	sp, #8
   b55d6:	bd10      	pop	{r4, pc}

000b55d8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b55d8:	7c00      	ldrb	r0, [r0, #16]
   b55da:	f7ff bb5f 	b.w	b4c9c <HAL_USB_USART_Flush_Data>

000b55de <_ZN9USBSerialD0Ev>:
   b55de:	b510      	push	{r4, lr}
   b55e0:	2114      	movs	r1, #20
   b55e2:	4604      	mov	r4, r0
   b55e4:	f7fe fd5b 	bl	b409e <_ZdlPvj>
   b55e8:	4620      	mov	r0, r4
   b55ea:	bd10      	pop	{r4, pc}

000b55ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b55ec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b55ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55f2:	4604      	mov	r4, r0
   b55f4:	4608      	mov	r0, r1
   b55f6:	2100      	movs	r1, #0
   b55f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b55fc:	4b04      	ldr	r3, [pc, #16]	; (b5610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b55fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5600:	2301      	movs	r3, #1
  _serial = serial;
   b5602:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5604:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5606:	4611      	mov	r1, r2
   b5608:	f7ff fb18 	bl	b4c3c <HAL_USB_USART_Init>
}
   b560c:	4620      	mov	r0, r4
   b560e:	bd10      	pop	{r4, pc}
   b5610:	000b6428 	.word	0x000b6428

000b5614 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5614:	7c00      	ldrb	r0, [r0, #16]
   b5616:	2200      	movs	r2, #0
   b5618:	f7ff bb18 	b.w	b4c4c <HAL_USB_USART_Begin>

000b561c <_Z19acquireSerialBufferv>:
{
   b561c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b561e:	2214      	movs	r2, #20
{
   b5620:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5622:	2100      	movs	r1, #0
   b5624:	f000 fdb2 	bl	b618c <memset>
}
   b5628:	4620      	mov	r0, r4
   b562a:	bd10      	pop	{r4, pc}

000b562c <_Z16_fetch_usbserialv>:
{
   b562c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b562e:	4c0f      	ldr	r4, [pc, #60]	; (b566c <_Z16_fetch_usbserialv+0x40>)
{
   b5630:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5632:	a803      	add	r0, sp, #12
   b5634:	f7ff fff2 	bl	b561c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5638:	7821      	ldrb	r1, [r4, #0]
   b563a:	f3bf 8f5b 	dmb	ish
   b563e:	f011 0101 	ands.w	r1, r1, #1
   b5642:	d10f      	bne.n	b5664 <_Z16_fetch_usbserialv+0x38>
   b5644:	4620      	mov	r0, r4
   b5646:	9101      	str	r1, [sp, #4]
   b5648:	f7fe fd2b 	bl	b40a2 <__cxa_guard_acquire>
   b564c:	9901      	ldr	r1, [sp, #4]
   b564e:	b148      	cbz	r0, b5664 <_Z16_fetch_usbserialv+0x38>
   b5650:	aa03      	add	r2, sp, #12
   b5652:	4807      	ldr	r0, [pc, #28]	; (b5670 <_Z16_fetch_usbserialv+0x44>)
   b5654:	f7ff ffca 	bl	b55ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5658:	4620      	mov	r0, r4
   b565a:	f7fe fd27 	bl	b40ac <__cxa_guard_release>
   b565e:	4805      	ldr	r0, [pc, #20]	; (b5674 <_Z16_fetch_usbserialv+0x48>)
   b5660:	f000 fd6c 	bl	b613c <atexit>
	return _usbserial;
}
   b5664:	4802      	ldr	r0, [pc, #8]	; (b5670 <_Z16_fetch_usbserialv+0x44>)
   b5666:	b008      	add	sp, #32
   b5668:	bd10      	pop	{r4, pc}
   b566a:	bf00      	nop
   b566c:	2003e718 	.word	0x2003e718
   b5670:	2003e71c 	.word	0x2003e71c
   b5674:	000b5575 	.word	0x000b5575

000b5678 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5678:	4770      	bx	lr

000b567a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b567a:	7441      	strb	r1, [r0, #17]
}
   b567c:	4770      	bx	lr

000b567e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b567e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5680:	7c00      	ldrb	r0, [r0, #16]
   b5682:	f7ff fa9b 	bl	b4bbc <hal_usart_available_data_for_write>
}
   b5686:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b568a:	bd08      	pop	{r3, pc}

000b568c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b568c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b568e:	7c00      	ldrb	r0, [r0, #16]
   b5690:	f7ff fa74 	bl	b4b7c <hal_usart_available>
}
   b5694:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5698:	bd08      	pop	{r3, pc}

000b569a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b569a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b569c:	7c00      	ldrb	r0, [r0, #16]
   b569e:	f7ff fa7d 	bl	b4b9c <hal_usart_peek>
}
   b56a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56a6:	bd08      	pop	{r3, pc}

000b56a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b56a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b56aa:	7c00      	ldrb	r0, [r0, #16]
   b56ac:	f7ff fa6e 	bl	b4b8c <hal_usart_read>
}
   b56b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56b4:	bd08      	pop	{r3, pc}

000b56b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b56b6:	7c00      	ldrb	r0, [r0, #16]
   b56b8:	f7ff ba78 	b.w	b4bac <hal_usart_flush>

000b56bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b56bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56be:	7c45      	ldrb	r5, [r0, #17]
{
   b56c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56c2:	b12d      	cbz	r5, b56d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b56c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b56c6:	b003      	add	sp, #12
   b56c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b56cc:	f7ff ba4e 	b.w	b4b6c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56d0:	7c00      	ldrb	r0, [r0, #16]
   b56d2:	9101      	str	r1, [sp, #4]
   b56d4:	f7ff fa72 	bl	b4bbc <hal_usart_available_data_for_write>
   b56d8:	2800      	cmp	r0, #0
   b56da:	9901      	ldr	r1, [sp, #4]
   b56dc:	dcf2      	bgt.n	b56c4 <_ZN11USARTSerial5writeEh+0x8>
}
   b56de:	4628      	mov	r0, r5
   b56e0:	b003      	add	sp, #12
   b56e2:	bd30      	pop	{r4, r5, pc}

000b56e4 <_ZN11USARTSerialD0Ev>:
   b56e4:	b510      	push	{r4, lr}
   b56e6:	2114      	movs	r1, #20
   b56e8:	4604      	mov	r4, r0
   b56ea:	f7fe fcd8 	bl	b409e <_ZdlPvj>
   b56ee:	4620      	mov	r0, r4
   b56f0:	bd10      	pop	{r4, pc}
	...

000b56f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b56f4:	b510      	push	{r4, lr}
   b56f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56fa:	4604      	mov	r4, r0
   b56fc:	4608      	mov	r0, r1
   b56fe:	4611      	mov	r1, r2
   b5700:	2200      	movs	r2, #0
   b5702:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5706:	4b04      	ldr	r3, [pc, #16]	; (b5718 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5708:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b570a:	2301      	movs	r3, #1
  _serial = serial;
   b570c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b570e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5710:	f7ff fa5c 	bl	b4bcc <hal_usart_init_ex>
}
   b5714:	4620      	mov	r0, r4
   b5716:	bd10      	pop	{r4, pc}
   b5718:	000b6458 	.word	0x000b6458

000b571c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b571c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b571e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5720:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5724:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5726:	2201      	movs	r2, #1
   b5728:	f04f 33ff 	mov.w	r3, #4294967295
   b572c:	f10d 0107 	add.w	r1, sp, #7
   b5730:	47a0      	blx	r4
}
   b5732:	b002      	add	sp, #8
   b5734:	bd10      	pop	{r4, pc}

000b5736 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5736:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5738:	6803      	ldr	r3, [r0, #0]
   b573a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b573c:	f04f 33ff 	mov.w	r3, #4294967295
   b5740:	46a4      	mov	ip, r4
}
   b5742:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5746:	4760      	bx	ip

000b5748 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5748:	b513      	push	{r0, r1, r4, lr}
   b574a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b574c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b574e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5752:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5754:	f10d 0107 	add.w	r1, sp, #7
   b5758:	2201      	movs	r2, #1
   b575a:	47a0      	blx	r4
}
   b575c:	b002      	add	sp, #8
   b575e:	bd10      	pop	{r4, pc}

000b5760 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5760:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5762:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5764:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5768:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b576c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b576e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5770:	d008      	beq.n	b5784 <_ZN9TCPClient4readEv+0x24>
   b5772:	6963      	ldr	r3, [r4, #20]
   b5774:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5778:	1c51      	adds	r1, r2, #1
   b577a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b577e:	4413      	add	r3, r2
   b5780:	7918      	ldrb	r0, [r3, #4]
}
   b5782:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5784:	6803      	ldr	r3, [r0, #0]
   b5786:	691b      	ldr	r3, [r3, #16]
   b5788:	4798      	blx	r3
   b578a:	2800      	cmp	r0, #0
   b578c:	d1f1      	bne.n	b5772 <_ZN9TCPClient4readEv+0x12>
   b578e:	f04f 30ff 	mov.w	r0, #4294967295
   b5792:	e7f6      	b.n	b5782 <_ZN9TCPClient4readEv+0x22>

000b5794 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5794:	4770      	bx	lr

000b5796 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5796:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5798:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b579a:	43c0      	mvns	r0, r0
   b579c:	0fc0      	lsrs	r0, r0, #31
   b579e:	4770      	bx	lr

000b57a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b57a0:	4770      	bx	lr
	...

000b57a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b57a4:	4b06      	ldr	r3, [pc, #24]	; (b57c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b57a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b57a8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b57aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b57ae:	d005      	beq.n	b57bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b57b0:	4608      	mov	r0, r1
   b57b2:	f000 fbb1 	bl	b5f18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b57b6:	2800      	cmp	r0, #0
   b57b8:	bf08      	it	eq
   b57ba:	2400      	moveq	r4, #0
      }
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}
   b57c0:	000b63e4 	.word	0x000b63e4

000b57c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b57c4:	b510      	push	{r4, lr}
   b57c6:	21ac      	movs	r1, #172	; 0xac
   b57c8:	4604      	mov	r4, r0
   b57ca:	f7fe fc68 	bl	b409e <_ZdlPvj>
   b57ce:	4620      	mov	r0, r4
   b57d0:	bd10      	pop	{r4, pc}

000b57d2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b57d2:	21ac      	movs	r1, #172	; 0xac
   b57d4:	f7fe bc63 	b.w	b409e <_ZdlPvj>

000b57d8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b57d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b57dc:	f04f 0800 	mov.w	r8, #0
   b57e0:	b086      	sub	sp, #24
   b57e2:	461c      	mov	r4, r3
   b57e4:	f8c0 8004 	str.w	r8, [r0, #4]
   b57e8:	4605      	mov	r5, r0
   b57ea:	460e      	mov	r6, r1
   b57ec:	4617      	mov	r7, r2
    struct timeval tv = {};
   b57ee:	4641      	mov	r1, r8
   b57f0:	2210      	movs	r2, #16
   b57f2:	a802      	add	r0, sp, #8
   b57f4:	f000 fcca 	bl	b618c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b57f8:	1c63      	adds	r3, r4, #1
   b57fa:	d009      	beq.n	b5810 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b57fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5800:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5804:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5808:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b580c:	435c      	muls	r4, r3
   b580e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5810:	6968      	ldr	r0, [r5, #20]
   b5812:	2310      	movs	r3, #16
   b5814:	9300      	str	r3, [sp, #0]
   b5816:	6800      	ldr	r0, [r0, #0]
   b5818:	ab02      	add	r3, sp, #8
   b581a:	f241 0205 	movw	r2, #4101	; 0x1005
   b581e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5822:	f7ff f9db 	bl	b4bdc <sock_setsockopt>
    if (ret < 0) {
   b5826:	2800      	cmp	r0, #0
   b5828:	da07      	bge.n	b583a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b582a:	f7ff fb2b 	bl	b4e84 <__errno>
   b582e:	6803      	ldr	r3, [r0, #0]
   b5830:	606b      	str	r3, [r5, #4]
        return 0;
   b5832:	2000      	movs	r0, #0
}
   b5834:	b006      	add	sp, #24
   b5836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b583a:	6968      	ldr	r0, [r5, #20]
   b583c:	2300      	movs	r3, #0
   b583e:	6800      	ldr	r0, [r0, #0]
   b5840:	463a      	mov	r2, r7
   b5842:	4631      	mov	r1, r6
   b5844:	f7ff f9ea 	bl	b4c1c <sock_send>
    if (ret < 0) {
   b5848:	1e03      	subs	r3, r0, #0
   b584a:	dbee      	blt.n	b582a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b584c:	4618      	mov	r0, r3
   b584e:	e7f1      	b.n	b5834 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5850 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5850:	b530      	push	{r4, r5, lr}
   b5852:	b087      	sub	sp, #28
   b5854:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5856:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5858:	4668      	mov	r0, sp
   b585a:	f7ff fe79 	bl	b5550 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b585e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5860:	3404      	adds	r4, #4
   b5862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5864:	682b      	ldr	r3, [r5, #0]
   b5866:	7023      	strb	r3, [r4, #0]
    }
   b5868:	b007      	add	sp, #28
   b586a:	bd30      	pop	{r4, r5, pc}

000b586c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b586c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b586e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5870:	4b05      	ldr	r3, [pc, #20]	; (b5888 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5872:	4604      	mov	r4, r0
   b5874:	358c      	adds	r5, #140	; 0x8c
   b5876:	f844 3b04 	str.w	r3, [r4], #4
   b587a:	4606      	mov	r6, r0
   b587c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b587e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5880:	682b      	ldr	r3, [r5, #0]
   b5882:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5884:	4630      	mov	r0, r6
   b5886:	bd70      	pop	{r4, r5, r6, pc}
   b5888:	000b6414 	.word	0x000b6414

000b588c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b588c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5890:	4698      	mov	r8, r3
    stop();
   b5892:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5894:	b093      	sub	sp, #76	; 0x4c
   b5896:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5898:	2400      	movs	r4, #0
    stop();
   b589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b589c:	4606      	mov	r6, r0
   b589e:	4617      	mov	r7, r2
    stop();
   b58a0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b58a2:	4628      	mov	r0, r5
   b58a4:	466b      	mov	r3, sp
   b58a6:	4622      	mov	r2, r4
   b58a8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b58aa:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b58ac:	f7ff f8f6 	bl	b4a9c <netdb_getaddrinfo>
   b58b0:	4605      	mov	r5, r0
   b58b2:	2800      	cmp	r0, #0
   b58b4:	d163      	bne.n	b597e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b58b6:	9b00      	ldr	r3, [sp, #0]
   b58b8:	2b00      	cmp	r3, #0
   b58ba:	d04b      	beq.n	b5954 <_ZN9TCPClient7connectEPKctm+0xc8>
   b58bc:	695b      	ldr	r3, [r3, #20]
   b58be:	2b00      	cmp	r3, #0
   b58c0:	d048      	beq.n	b5954 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b58c2:	a806      	add	r0, sp, #24
   b58c4:	f7ff fe00 	bl	b54c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b58c8:	9b00      	ldr	r3, [sp, #0]
   b58ca:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b58cc:	7863      	ldrb	r3, [r4, #1]
   b58ce:	2b02      	cmp	r3, #2
   b58d0:	d104      	bne.n	b58dc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b58d2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b58d4:	a806      	add	r0, sp, #24
   b58d6:	f7ff ffbb 	bl	b5850 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b58da:	e026      	b.n	b592a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b58dc:	2b0a      	cmp	r3, #10
   b58de:	d124      	bne.n	b592a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b58e0:	2211      	movs	r2, #17
   b58e2:	4629      	mov	r1, r5
   b58e4:	a801      	add	r0, sp, #4
   b58e6:	f000 fc51 	bl	b618c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b58ea:	68a3      	ldr	r3, [r4, #8]
   b58ec:	2b00      	cmp	r3, #0
   b58ee:	d038      	beq.n	b5962 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b58f0:	f104 0308 	add.w	r3, r4, #8
   b58f4:	f10d 0c04 	add.w	ip, sp, #4
   b58f8:	3418      	adds	r4, #24
   b58fa:	6818      	ldr	r0, [r3, #0]
   b58fc:	6859      	ldr	r1, [r3, #4]
   b58fe:	4662      	mov	r2, ip
   b5900:	c203      	stmia	r2!, {r0, r1}
   b5902:	3308      	adds	r3, #8
   b5904:	42a3      	cmp	r3, r4
   b5906:	4694      	mov	ip, r2
   b5908:	d1f7      	bne.n	b58fa <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b590a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b590c:	a901      	add	r1, sp, #4
   b590e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5910:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5914:	f7ff fde6 	bl	b54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5918:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b591c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5920:	ac07      	add	r4, sp, #28
   b5922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5924:	f8dc 3000 	ldr.w	r3, [ip]
   b5928:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b592a:	a806      	add	r0, sp, #24
   b592c:	f7ff fdec 	bl	b5508 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5930:	b180      	cbz	r0, b5954 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5932:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5934:	ad07      	add	r5, sp, #28
   b5936:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b593a:	4b12      	ldr	r3, [pc, #72]	; (b5984 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b593c:	930c      	str	r3, [sp, #48]	; 0x30
   b593e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5940:	ac0d      	add	r4, sp, #52	; 0x34
   b5942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5944:	682b      	ldr	r3, [r5, #0]
   b5946:	7023      	strb	r3, [r4, #0]
   b5948:	463a      	mov	r2, r7
   b594a:	4643      	mov	r3, r8
   b594c:	a90c      	add	r1, sp, #48	; 0x30
   b594e:	4630      	mov	r0, r6
   b5950:	47c8      	blx	r9
   b5952:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5954:	9800      	ldr	r0, [sp, #0]
   b5956:	f7ff f899 	bl	b4a8c <netdb_freeaddrinfo>
}
   b595a:	4628      	mov	r0, r5
   b595c:	b013      	add	sp, #76	; 0x4c
   b595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5962:	68e3      	ldr	r3, [r4, #12]
   b5964:	2b00      	cmp	r3, #0
   b5966:	d1c3      	bne.n	b58f0 <_ZN9TCPClient7connectEPKctm+0x64>
   b5968:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b596c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5970:	f7ff f8ec 	bl	b4b4c <inet_htonl>
   b5974:	4581      	cmp	r9, r0
   b5976:	d1bb      	bne.n	b58f0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5978:	f104 0114 	add.w	r1, r4, #20
   b597c:	e7aa      	b.n	b58d4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b597e:	4625      	mov	r5, r4
   b5980:	e7e8      	b.n	b5954 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5982:	bf00      	nop
   b5984:	000b6414 	.word	0x000b6414

000b5988 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5988:	b538      	push	{r3, r4, r5, lr}
   b598a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b598c:	681a      	ldr	r2, [r3, #0]
   b598e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5990:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5992:	da10      	bge.n	b59b6 <_ZN9TCPClient9connectedEv+0x2e>
   b5994:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5998:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b599c:	429a      	cmp	r2, r3
   b599e:	d10a      	bne.n	b59b6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b59a0:	6803      	ldr	r3, [r0, #0]
   b59a2:	691b      	ldr	r3, [r3, #16]
   b59a4:	4798      	blx	r3
        if (!rv) {
   b59a6:	4604      	mov	r4, r0
   b59a8:	b928      	cbnz	r0, b59b6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b59aa:	682b      	ldr	r3, [r5, #0]
   b59ac:	4628      	mov	r0, r5
   b59ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59b0:	4798      	blx	r3
        rv = available();
   b59b2:	4620      	mov	r0, r4
}
   b59b4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b59b6:	2001      	movs	r0, #1
   b59b8:	e7fc      	b.n	b59b4 <_ZN9TCPClient9connectedEv+0x2c>

000b59ba <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b59ba:	b510      	push	{r4, lr}
   b59bc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59c6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b59c8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59ca:	d005      	beq.n	b59d8 <_ZN9TCPClient4peekEv+0x1e>
   b59cc:	6963      	ldr	r3, [r4, #20]
   b59ce:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b59d2:	4413      	add	r3, r2
   b59d4:	7918      	ldrb	r0, [r3, #4]
}
   b59d6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59d8:	6803      	ldr	r3, [r0, #0]
   b59da:	691b      	ldr	r3, [r3, #16]
   b59dc:	4798      	blx	r3
   b59de:	2800      	cmp	r0, #0
   b59e0:	d1f4      	bne.n	b59cc <_ZN9TCPClient4peekEv+0x12>
   b59e2:	f04f 30ff 	mov.w	r0, #4294967295
   b59e6:	e7f6      	b.n	b59d6 <_ZN9TCPClient4peekEv+0x1c>

000b59e8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b59e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59ea:	6943      	ldr	r3, [r0, #20]
   b59ec:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b59ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59f6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b59f8:	4605      	mov	r5, r0
   b59fa:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b59fc:	d016      	beq.n	b5a2c <_ZN9TCPClient4readEPhj+0x44>
   b59fe:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5a00:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5a04:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5a08:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5a0a:	42bc      	cmp	r4, r7
   b5a0c:	bf28      	it	cs
   b5a0e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5a10:	3304      	adds	r3, #4
   b5a12:	4622      	mov	r2, r4
   b5a14:	4419      	add	r1, r3
   b5a16:	4630      	mov	r0, r6
   b5a18:	f000 fbaa 	bl	b6170 <memcpy>
   b5a1c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5a1e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5a22:	4423      	add	r3, r4
   b5a24:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5a28:	4620      	mov	r0, r4
   b5a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5a2c:	6803      	ldr	r3, [r0, #0]
   b5a2e:	691b      	ldr	r3, [r3, #16]
   b5a30:	4798      	blx	r3
   b5a32:	2800      	cmp	r0, #0
   b5a34:	d1e3      	bne.n	b59fe <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5a36:	f04f 34ff 	mov.w	r4, #4294967295
   b5a3a:	e7f5      	b.n	b5a28 <_ZN9TCPClient4readEPhj+0x40>

000b5a3c <_ZN9TCPClient12flush_bufferEv>:
   b5a3c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5a3e:	2300      	movs	r3, #0
   b5a40:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5a44:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5a46:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5a4a:	4770      	bx	lr

000b5a4c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a50:	461f      	mov	r7, r3
    stop();
   b5a52:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a54:	460c      	mov	r4, r1
    stop();
   b5a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a58:	b08a      	sub	sp, #40	; 0x28
   b5a5a:	4605      	mov	r5, r0
   b5a5c:	4616      	mov	r6, r2
    stop();
   b5a5e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5a60:	7d23      	ldrb	r3, [r4, #20]
   b5a62:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5a66:	2b04      	cmp	r3, #4
   b5a68:	bf0c      	ite	eq
   b5a6a:	2002      	moveq	r0, #2
   b5a6c:	200a      	movne	r0, #10
   b5a6e:	2206      	movs	r2, #6
   b5a70:	2101      	movs	r1, #1
   b5a72:	f7ff f8db 	bl	b4c2c <sock_socket>
   b5a76:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5a7a:	696b      	ldr	r3, [r5, #20]
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	2b00      	cmp	r3, #0
   b5a80:	da08      	bge.n	b5a94 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5a82:	682b      	ldr	r3, [r5, #0]
   b5a84:	4628      	mov	r0, r5
   b5a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5a88:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5a8a:	4798      	blx	r3
}
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	b00a      	add	sp, #40	; 0x28
   b5a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5a94:	4628      	mov	r0, r5
   b5a96:	f7ff ffd1 	bl	b5a3c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5a9a:	b1b7      	cbz	r7, b5aca <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5a9c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5a9e:	a903      	add	r1, sp, #12
   b5aa0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5aa2:	9303      	str	r3, [sp, #12]
   b5aa4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5aa8:	f7ff f800 	bl	b4aac <if_index_to_name>
   b5aac:	2800      	cmp	r0, #0
   b5aae:	d1e8      	bne.n	b5a82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5ab0:	6968      	ldr	r0, [r5, #20]
   b5ab2:	2306      	movs	r3, #6
   b5ab4:	9300      	str	r3, [sp, #0]
   b5ab6:	6800      	ldr	r0, [r0, #0]
   b5ab8:	ab03      	add	r3, sp, #12
   b5aba:	f241 020b 	movw	r2, #4107	; 0x100b
   b5abe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ac2:	f7ff f88b 	bl	b4bdc <sock_setsockopt>
   b5ac6:	2800      	cmp	r0, #0
   b5ac8:	d1db      	bne.n	b5a82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5aca:	221c      	movs	r2, #28
   b5acc:	2100      	movs	r1, #0
   b5ace:	a803      	add	r0, sp, #12
   b5ad0:	f000 fb5c 	bl	b618c <memset>
    if (ip.version() == 4) {
   b5ad4:	7d23      	ldrb	r3, [r4, #20]
   b5ad6:	2b04      	cmp	r3, #4
   b5ad8:	d11d      	bne.n	b5b16 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5ada:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5ade:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5ae4:	f7ff f83a 	bl	b4b5c <inet_htons>
   b5ae8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5aec:	6860      	ldr	r0, [r4, #4]
   b5aee:	f7ff f82d 	bl	b4b4c <inet_htonl>
   b5af2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5af4:	696b      	ldr	r3, [r5, #20]
   b5af6:	221c      	movs	r2, #28
   b5af8:	6818      	ldr	r0, [r3, #0]
   b5afa:	a903      	add	r1, sp, #12
   b5afc:	f7ff f87e 	bl	b4bfc <sock_connect>
   b5b00:	2800      	cmp	r0, #0
   b5b02:	d1be      	bne.n	b5a82 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5b04:	3404      	adds	r4, #4
   b5b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5b08:	696d      	ldr	r5, [r5, #20]
   b5b0a:	358c      	adds	r5, #140	; 0x8c
   b5b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5b0e:	6823      	ldr	r3, [r4, #0]
   b5b10:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5b12:	2401      	movs	r4, #1
   b5b14:	e7ba      	b.n	b5a8c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5b16:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5b1a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5b1c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5b20:	f7ff f81c 	bl	b4b5c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5b24:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5b26:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5b2a:	1d23      	adds	r3, r4, #4
   b5b2c:	f104 0714 	add.w	r7, r4, #20
   b5b30:	6818      	ldr	r0, [r3, #0]
   b5b32:	6859      	ldr	r1, [r3, #4]
   b5b34:	4632      	mov	r2, r6
   b5b36:	c203      	stmia	r2!, {r0, r1}
   b5b38:	3308      	adds	r3, #8
   b5b3a:	42bb      	cmp	r3, r7
   b5b3c:	4616      	mov	r6, r2
   b5b3e:	d1f7      	bne.n	b5b30 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5b40:	e7d8      	b.n	b5af4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5b44 <_ZN9TCPClient9availableEv>:
{
   b5b44:	b530      	push	{r4, r5, lr}
   b5b46:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5b48:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5b4c:	b08b      	sub	sp, #44	; 0x2c
   b5b4e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5b50:	b12b      	cbz	r3, b5b5e <_ZN9TCPClient9availableEv+0x1a>
   b5b52:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5b56:	429a      	cmp	r2, r3
   b5b58:	d101      	bne.n	b5b5e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5b5a:	f7ff ff6f 	bl	b5a3c <_ZN9TCPClient12flush_bufferEv>
   b5b5e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5b60:	6808      	ldr	r0, [r1, #0]
   b5b62:	2800      	cmp	r0, #0
   b5b64:	db18      	blt.n	b5b98 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5b66:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5b6a:	2d7f      	cmp	r5, #127	; 0x7f
   b5b6c:	d814      	bhi.n	b5b98 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5b6e:	3104      	adds	r1, #4
   b5b70:	2308      	movs	r3, #8
   b5b72:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5b76:	4429      	add	r1, r5
   b5b78:	f7ff f848 	bl	b4c0c <sock_recv>
            if (ret > 0) {
   b5b7c:	2800      	cmp	r0, #0
   b5b7e:	dd13      	ble.n	b5ba8 <_ZN9TCPClient9availableEv+0x64>
   b5b80:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5b82:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5b86:	b90a      	cbnz	r2, b5b8c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5b88:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5b8c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5b8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5b92:	4410      	add	r0, r2
   b5b94:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5b98:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5b9a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5b9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5ba2:	1ac0      	subs	r0, r0, r3
   b5ba4:	b00b      	add	sp, #44	; 0x2c
   b5ba6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5ba8:	f7ff f96c 	bl	b4e84 <__errno>
   b5bac:	6803      	ldr	r3, [r0, #0]
   b5bae:	2b0b      	cmp	r3, #11
   b5bb0:	d0f2      	beq.n	b5b98 <_ZN9TCPClient9availableEv+0x54>
   b5bb2:	f7ff f967 	bl	b4e84 <__errno>
   b5bb6:	6803      	ldr	r3, [r0, #0]
   b5bb8:	2b0b      	cmp	r3, #11
   b5bba:	d0ed      	beq.n	b5b98 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5bbc:	2320      	movs	r3, #32
   b5bbe:	2500      	movs	r5, #0
   b5bc0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5bc4:	f7ff f95e 	bl	b4e84 <__errno>
   b5bc8:	6803      	ldr	r3, [r0, #0]
   b5bca:	9301      	str	r3, [sp, #4]
   b5bcc:	4b08      	ldr	r3, [pc, #32]	; (b5bf0 <_ZN9TCPClient9availableEv+0xac>)
   b5bce:	4909      	ldr	r1, [pc, #36]	; (b5bf4 <_ZN9TCPClient9availableEv+0xb0>)
   b5bd0:	9300      	str	r3, [sp, #0]
   b5bd2:	aa02      	add	r2, sp, #8
   b5bd4:	462b      	mov	r3, r5
   b5bd6:	2032      	movs	r0, #50	; 0x32
   b5bd8:	f7ff f880 	bl	b4cdc <log_message>
                    sock_close(d_->sock);
   b5bdc:	6963      	ldr	r3, [r4, #20]
   b5bde:	6818      	ldr	r0, [r3, #0]
   b5be0:	f7ff f804 	bl	b4bec <sock_close>
   b5be4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5be6:	f04f 32ff 	mov.w	r2, #4294967295
   b5bea:	601a      	str	r2, [r3, #0]
   b5bec:	e7d4      	b.n	b5b98 <_ZN9TCPClient9availableEv+0x54>
   b5bee:	bf00      	nop
   b5bf0:	000b6487 	.word	0x000b6487
   b5bf4:	000b6480 	.word	0x000b6480

000b5bf8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5bf8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5bfa:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5bfc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5bfe:	6818      	ldr	r0, [r3, #0]
   b5c00:	2800      	cmp	r0, #0
   b5c02:	db01      	blt.n	b5c08 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5c04:	f7fe fff2 	bl	b4bec <sock_close>
   b5c08:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5c0a:	f04f 32ff 	mov.w	r2, #4294967295
   b5c0e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5c10:	6960      	ldr	r0, [r4, #20]
   b5c12:	2211      	movs	r2, #17
   b5c14:	2100      	movs	r1, #0
   b5c16:	308c      	adds	r0, #140	; 0x8c
   b5c18:	f000 fab8 	bl	b618c <memset>
    flush_buffer();
   b5c1c:	4620      	mov	r0, r4
}
   b5c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5c22:	f7ff bf0b 	b.w	b5a3c <_ZN9TCPClient12flush_bufferEv>

000b5c26 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5c26:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5c28:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5c2a:	4604      	mov	r4, r0
          total(0) {
   b5c2c:	6001      	str	r1, [r0, #0]
   b5c2e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5c32:	3088      	adds	r0, #136	; 0x88
   b5c34:	f7ff fc48 	bl	b54c8 <_ZN9IPAddressC1Ev>
}
   b5c38:	4620      	mov	r0, r4
   b5c3a:	bd10      	pop	{r4, pc}

000b5c3c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c3e:	2300      	movs	r3, #0
   b5c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c44:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5c48:	4a0e      	ldr	r2, [pc, #56]	; (b5c84 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5c4a:	6103      	str	r3, [r0, #16]
   b5c4c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5c4e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5c50:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c52:	20ac      	movs	r0, #172	; 0xac
   b5c54:	9101      	str	r1, [sp, #4]
   b5c56:	f7fe fa1c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5c5a:	1e05      	subs	r5, r0, #0
   b5c5c:	f105 060c 	add.w	r6, r5, #12
   b5c60:	d008      	beq.n	b5c74 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5c62:	2301      	movs	r3, #1
   b5c64:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5c68:	4b07      	ldr	r3, [pc, #28]	; (b5c88 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5c6a:	9901      	ldr	r1, [sp, #4]
   b5c6c:	602b      	str	r3, [r5, #0]
   b5c6e:	4630      	mov	r0, r6
   b5c70:	f7ff ffd9 	bl	b5c26 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5c74:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5c76:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5c7a:	f7ff fedf 	bl	b5a3c <_ZN9TCPClient12flush_bufferEv>
}
   b5c7e:	b002      	add	sp, #8
   b5c80:	bd70      	pop	{r4, r5, r6, pc}
   b5c82:	bf00      	nop
   b5c84:	000b64bc 	.word	0x000b64bc
   b5c88:	000b64a0 	.word	0x000b64a0

000b5c8c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5c8c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5c8e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5c92:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5c94:	f7ff ffd2 	bl	b5c3c <_ZN9TCPClientC1Ei>
}
   b5c98:	4620      	mov	r0, r4
   b5c9a:	bd10      	pop	{r4, pc}

000b5c9c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5c9c:	b510      	push	{r4, lr}
   b5c9e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5ca0:	6800      	ldr	r0, [r0, #0]
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	db01      	blt.n	b5caa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5ca6:	f7fe ffa1 	bl	b4bec <sock_close>
    }
}
   b5caa:	4620      	mov	r0, r4
   b5cac:	bd10      	pop	{r4, pc}

000b5cae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5cae:	300c      	adds	r0, #12
   b5cb0:	f7ff bff4 	b.w	b5c9c <_ZN9TCPClient4DataD1Ev>

000b5cb4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5cb4:	2200      	movs	r2, #0
   b5cb6:	6840      	ldr	r0, [r0, #4]
   b5cb8:	4611      	mov	r1, r2
   b5cba:	f7ff b863 	b.w	b4d84 <network_ready>

000b5cbe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5cbe:	2200      	movs	r2, #0
   b5cc0:	6840      	ldr	r0, [r0, #4]
   b5cc2:	4611      	mov	r1, r2
   b5cc4:	f7ff b87e 	b.w	b4dc4 <network_listening>

000b5cc8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5cc8:	2200      	movs	r2, #0
   b5cca:	6840      	ldr	r0, [r0, #4]
   b5ccc:	4611      	mov	r1, r2
   b5cce:	f7ff b889 	b.w	b4de4 <network_get_listen_timeout>

000b5cd2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5cd2:	6840      	ldr	r0, [r0, #4]
   b5cd4:	2200      	movs	r2, #0
   b5cd6:	f7ff b87d 	b.w	b4dd4 <network_set_listen_timeout>

000b5cda <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5cda:	6840      	ldr	r0, [r0, #4]
   b5cdc:	2200      	movs	r2, #0
   b5cde:	f081 0101 	eor.w	r1, r1, #1
   b5ce2:	f7ff b867 	b.w	b4db4 <network_listen>

000b5ce6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5ce6:	2300      	movs	r3, #0
   b5ce8:	6840      	ldr	r0, [r0, #4]
   b5cea:	461a      	mov	r2, r3
   b5cec:	4619      	mov	r1, r3
   b5cee:	f7ff b859 	b.w	b4da4 <network_off>

000b5cf2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5cf2:	2300      	movs	r3, #0
   b5cf4:	6840      	ldr	r0, [r0, #4]
   b5cf6:	461a      	mov	r2, r3
   b5cf8:	4619      	mov	r1, r3
   b5cfa:	f7ff b84b 	b.w	b4d94 <network_on>

000b5cfe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5cfe:	2200      	movs	r2, #0
   b5d00:	6840      	ldr	r0, [r0, #4]
   b5d02:	4611      	mov	r1, r2
   b5d04:	f7ff b82e 	b.w	b4d64 <network_connecting>

000b5d08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d08:	6840      	ldr	r0, [r0, #4]
   b5d0a:	2200      	movs	r2, #0
   b5d0c:	2102      	movs	r1, #2
   b5d0e:	f7ff b831 	b.w	b4d74 <network_disconnect>

000b5d12 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5d12:	2300      	movs	r3, #0
   b5d14:	6840      	ldr	r0, [r0, #4]
   b5d16:	461a      	mov	r2, r3
   b5d18:	f7ff b81c 	b.w	b4d54 <network_connect>

000b5d1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5d1c:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5d1e:	2204      	movs	r2, #4
   b5d20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5d22:	4a02      	ldr	r2, [pc, #8]	; (b5d2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5d24:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5d26:	4770      	bx	lr
   b5d28:	2003e730 	.word	0x2003e730
   b5d2c:	000b6508 	.word	0x000b6508

000b5d30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d30:	2300      	movs	r3, #0
   b5d32:	6840      	ldr	r0, [r0, #4]
   b5d34:	461a      	mov	r2, r3
   b5d36:	f7ff b80d 	b.w	b4d54 <network_connect>

000b5d3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d3a:	6840      	ldr	r0, [r0, #4]
   b5d3c:	2200      	movs	r2, #0
   b5d3e:	2102      	movs	r1, #2
   b5d40:	f7ff b818 	b.w	b4d74 <network_disconnect>

000b5d44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d44:	2200      	movs	r2, #0
   b5d46:	6840      	ldr	r0, [r0, #4]
   b5d48:	4611      	mov	r1, r2
   b5d4a:	f7ff b80b 	b.w	b4d64 <network_connecting>

000b5d4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d4e:	2200      	movs	r2, #0
   b5d50:	6840      	ldr	r0, [r0, #4]
   b5d52:	4611      	mov	r1, r2
   b5d54:	f7ff b816 	b.w	b4d84 <network_ready>

000b5d58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d58:	2300      	movs	r3, #0
   b5d5a:	6840      	ldr	r0, [r0, #4]
   b5d5c:	461a      	mov	r2, r3
   b5d5e:	4619      	mov	r1, r3
   b5d60:	f7ff b818 	b.w	b4d94 <network_on>

000b5d64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5d64:	2300      	movs	r3, #0
   b5d66:	6840      	ldr	r0, [r0, #4]
   b5d68:	461a      	mov	r2, r3
   b5d6a:	4619      	mov	r1, r3
   b5d6c:	f7ff b81a 	b.w	b4da4 <network_off>

000b5d70 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d70:	6840      	ldr	r0, [r0, #4]
   b5d72:	2100      	movs	r1, #0
   b5d74:	f7ff b83e 	b.w	b4df4 <network_is_on>

000b5d78 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d78:	6840      	ldr	r0, [r0, #4]
   b5d7a:	2100      	movs	r1, #0
   b5d7c:	f7ff b842 	b.w	b4e04 <network_is_off>

000b5d80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d80:	6840      	ldr	r0, [r0, #4]
   b5d82:	2200      	movs	r2, #0
   b5d84:	f081 0101 	eor.w	r1, r1, #1
   b5d88:	f7ff b814 	b.w	b4db4 <network_listen>

000b5d8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d8c:	6840      	ldr	r0, [r0, #4]
   b5d8e:	2200      	movs	r2, #0
   b5d90:	f7ff b820 	b.w	b4dd4 <network_set_listen_timeout>

000b5d94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d94:	2200      	movs	r2, #0
   b5d96:	6840      	ldr	r0, [r0, #4]
   b5d98:	4611      	mov	r1, r2
   b5d9a:	f7ff b823 	b.w	b4de4 <network_get_listen_timeout>

000b5d9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5d9e:	2200      	movs	r2, #0
   b5da0:	6840      	ldr	r0, [r0, #4]
   b5da2:	4611      	mov	r1, r2
   b5da4:	f7ff b80e 	b.w	b4dc4 <network_listening>

000b5da8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5dac:	b095      	sub	sp, #84	; 0x54
   b5dae:	4614      	mov	r4, r2
   b5db0:	460d      	mov	r5, r1
   b5db2:	4607      	mov	r7, r0
    IPAddress addr;
   b5db4:	f7ff fb88 	bl	b54c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5db8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5dba:	221c      	movs	r2, #28
   b5dbc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5dbe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5dc0:	f000 f9e4 	bl	b618c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5dc4:	2340      	movs	r3, #64	; 0x40
   b5dc6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5dc8:	4620      	mov	r0, r4
   b5dca:	466b      	mov	r3, sp
   b5dcc:	aa0c      	add	r2, sp, #48	; 0x30
   b5dce:	2100      	movs	r1, #0
   b5dd0:	f7fe fe64 	bl	b4a9c <netdb_getaddrinfo>
    if (!r) {
   b5dd4:	4604      	mov	r4, r0
   b5dd6:	2800      	cmp	r0, #0
   b5dd8:	d14b      	bne.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dda:	4602      	mov	r2, r0
   b5ddc:	2101      	movs	r1, #1
   b5dde:	6868      	ldr	r0, [r5, #4]
   b5de0:	f7fe ffd0 	bl	b4d84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5de6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de8:	4622      	mov	r2, r4
   b5dea:	6868      	ldr	r0, [r5, #4]
   b5dec:	f7fe ffca 	bl	b4d84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5df2:	4681      	mov	r9, r0
        bool ok = false;
   b5df4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df6:	2e00      	cmp	r6, #0
   b5df8:	d03b      	beq.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5dfa:	2900      	cmp	r1, #0
   b5dfc:	d139      	bne.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5dfe:	6873      	ldr	r3, [r6, #4]
   b5e00:	2b02      	cmp	r3, #2
   b5e02:	d003      	beq.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e04:	2b0a      	cmp	r3, #10
   b5e06:	d011      	beq.n	b5e2c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e08:	69f6      	ldr	r6, [r6, #28]
   b5e0a:	e7f4      	b.n	b5df6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5e0c:	f1b8 0f00 	cmp.w	r8, #0
   b5e10:	d0fa      	beq.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e12:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5e14:	a806      	add	r0, sp, #24
   b5e16:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e18:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e1a:	f7ff fb99 	bl	b5550 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e20:	1d3c      	adds	r4, r7, #4
   b5e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e24:	682b      	ldr	r3, [r5, #0]
   b5e26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e28:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5e2a:	e7ed      	b.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e2c:	f1b9 0f00 	cmp.w	r9, #0
   b5e30:	d0ea      	beq.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e32:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e34:	2210      	movs	r2, #16
   b5e36:	a801      	add	r0, sp, #4
   b5e38:	f000 f9a8 	bl	b618c <memset>
                    a.v = 6;
   b5e3c:	2306      	movs	r3, #6
   b5e3e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e42:	ad01      	add	r5, sp, #4
   b5e44:	f104 0308 	add.w	r3, r4, #8
   b5e48:	3418      	adds	r4, #24
   b5e4a:	6818      	ldr	r0, [r3, #0]
   b5e4c:	6859      	ldr	r1, [r3, #4]
   b5e4e:	462a      	mov	r2, r5
   b5e50:	c203      	stmia	r2!, {r0, r1}
   b5e52:	3308      	adds	r3, #8
   b5e54:	42a3      	cmp	r3, r4
   b5e56:	4615      	mov	r5, r2
   b5e58:	d1f7      	bne.n	b5e4a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5e5a:	a901      	add	r1, sp, #4
   b5e5c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5e5e:	ad07      	add	r5, sp, #28
   b5e60:	f7ff fb40 	bl	b54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e66:	1d3c      	adds	r4, r7, #4
   b5e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e6a:	682b      	ldr	r3, [r5, #0]
   b5e6c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e6e:	4649      	mov	r1, r9
   b5e70:	e7ca      	b.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e72:	9800      	ldr	r0, [sp, #0]
   b5e74:	f7fe fe0a 	bl	b4a8c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e78:	4638      	mov	r0, r7
   b5e7a:	b015      	add	sp, #84	; 0x54
   b5e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5e80:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e82:	4a03      	ldr	r2, [pc, #12]	; (b5e90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e84:	601a      	str	r2, [r3, #0]
   b5e86:	2200      	movs	r2, #0
   b5e88:	605a      	str	r2, [r3, #4]

} // spark
   b5e8a:	4770      	bx	lr
   b5e8c:	2003e738 	.word	0x2003e738
   b5e90:	000b6544 	.word	0x000b6544

000b5e94 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5e94:	4770      	bx	lr
	...

000b5e98 <_Z20acquireSerial1Bufferv>:
{
   b5e98:	b538      	push	{r3, r4, r5, lr}
   b5e9a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5e9c:	2514      	movs	r5, #20
   b5e9e:	462a      	mov	r2, r5
   b5ea0:	2100      	movs	r1, #0
   b5ea2:	f000 f973 	bl	b618c <memset>
   b5ea6:	8025      	strh	r5, [r4, #0]
   b5ea8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eaa:	4907      	ldr	r1, [pc, #28]	; (b5ec8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5eac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5eb0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eb2:	f000 f82f 	bl	b5f14 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eb6:	4904      	ldr	r1, [pc, #16]	; (b5ec8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5eb8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eba:	4628      	mov	r0, r5
   b5ebc:	f000 f82a 	bl	b5f14 <_ZnajRKSt9nothrow_t>
    };
   b5ec0:	60e0      	str	r0, [r4, #12]
}
   b5ec2:	4620      	mov	r0, r4
   b5ec4:	bd38      	pop	{r3, r4, r5, pc}
   b5ec6:	bf00      	nop
   b5ec8:	000b6578 	.word	0x000b6578

000b5ecc <_Z22__fetch_global_Serial1v>:
{
   b5ecc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ece:	4d0e      	ldr	r5, [pc, #56]	; (b5f08 <_Z22__fetch_global_Serial1v+0x3c>)
   b5ed0:	7829      	ldrb	r1, [r5, #0]
   b5ed2:	f3bf 8f5b 	dmb	ish
   b5ed6:	f011 0401 	ands.w	r4, r1, #1
{
   b5eda:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5edc:	d111      	bne.n	b5f02 <_Z22__fetch_global_Serial1v+0x36>
   b5ede:	4628      	mov	r0, r5
   b5ee0:	f7fe f8df 	bl	b40a2 <__cxa_guard_acquire>
   b5ee4:	b168      	cbz	r0, b5f02 <_Z22__fetch_global_Serial1v+0x36>
   b5ee6:	a801      	add	r0, sp, #4
   b5ee8:	f7ff ffd6 	bl	b5e98 <_Z20acquireSerial1Bufferv>
   b5eec:	aa01      	add	r2, sp, #4
   b5eee:	4621      	mov	r1, r4
   b5ef0:	4806      	ldr	r0, [pc, #24]	; (b5f0c <_Z22__fetch_global_Serial1v+0x40>)
   b5ef2:	f7ff fbff 	bl	b56f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5ef6:	4628      	mov	r0, r5
   b5ef8:	f7fe f8d8 	bl	b40ac <__cxa_guard_release>
   b5efc:	4804      	ldr	r0, [pc, #16]	; (b5f10 <_Z22__fetch_global_Serial1v+0x44>)
   b5efe:	f000 f91d 	bl	b613c <atexit>
    return serial1;
}
   b5f02:	4802      	ldr	r0, [pc, #8]	; (b5f0c <_Z22__fetch_global_Serial1v+0x40>)
   b5f04:	b007      	add	sp, #28
   b5f06:	bd30      	pop	{r4, r5, pc}
   b5f08:	2003e740 	.word	0x2003e740
   b5f0c:	2003e744 	.word	0x2003e744
   b5f10:	000b5e95 	.word	0x000b5e95

000b5f14 <_ZnajRKSt9nothrow_t>:
   b5f14:	f7fe b8bf 	b.w	b4096 <_Znaj>

000b5f18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5f18:	4901      	ldr	r1, [pc, #4]	; (b5f20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5f1a:	f000 b8f9 	b.w	b6110 <_ZNKSt9type_infoeqERKS_>
   b5f1e:	bf00      	nop
   b5f20:	000b6594 	.word	0x000b6594

000b5f24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5f26:	2400      	movs	r4, #0
   b5f28:	2310      	movs	r3, #16
   b5f2a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5f2e:	6803      	ldr	r3, [r0, #0]
   b5f30:	4615      	mov	r5, r2
   b5f32:	699e      	ldr	r6, [r3, #24]
   b5f34:	6812      	ldr	r2, [r2, #0]
   b5f36:	466b      	mov	r3, sp
   b5f38:	e9cd 4400 	strd	r4, r4, [sp]
   b5f3c:	47b0      	blx	r6
   b5f3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5f42:	f003 0306 	and.w	r3, r3, #6
   b5f46:	2b06      	cmp	r3, #6
   b5f48:	bf03      	ittte	eq
   b5f4a:	9b00      	ldreq	r3, [sp, #0]
   b5f4c:	602b      	streq	r3, [r5, #0]
   b5f4e:	2001      	moveq	r0, #1
   b5f50:	4620      	movne	r0, r4
   b5f52:	b004      	add	sp, #16
   b5f54:	bd70      	pop	{r4, r5, r6, pc}

000b5f56 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5f56:	9800      	ldr	r0, [sp, #0]
   b5f58:	4290      	cmp	r0, r2
   b5f5a:	bf14      	ite	ne
   b5f5c:	2001      	movne	r0, #1
   b5f5e:	2006      	moveq	r0, #6
   b5f60:	4770      	bx	lr
	...

000b5f64 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5f64:	b510      	push	{r4, lr}
   b5f66:	4b03      	ldr	r3, [pc, #12]	; (b5f74 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5f68:	6003      	str	r3, [r0, #0]
   b5f6a:	4604      	mov	r4, r0
   b5f6c:	f000 f8cd 	bl	b610a <_ZNSt9type_infoD1Ev>
   b5f70:	4620      	mov	r0, r4
   b5f72:	bd10      	pop	{r4, pc}
   b5f74:	000b65d4 	.word	0x000b65d4

000b5f78 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5f78:	b510      	push	{r4, lr}
   b5f7a:	4604      	mov	r4, r0
   b5f7c:	f7ff fff2 	bl	b5f64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5f80:	4620      	mov	r0, r4
   b5f82:	2108      	movs	r1, #8
   b5f84:	f7fe f88b 	bl	b409e <_ZdlPvj>
   b5f88:	4620      	mov	r0, r4
   b5f8a:	bd10      	pop	{r4, pc}

000b5f8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f90:	461f      	mov	r7, r3
   b5f92:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5f96:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5f9a:	4598      	cmp	r8, r3
   b5f9c:	4606      	mov	r6, r0
   b5f9e:	4615      	mov	r5, r2
   b5fa0:	d107      	bne.n	b5fb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5fa2:	9907      	ldr	r1, [sp, #28]
   b5fa4:	f000 f8b4 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b5fa8:	b118      	cbz	r0, b5fb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5faa:	7165      	strb	r5, [r4, #5]
   b5fac:	2000      	movs	r0, #0
   b5fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5fb2:	4639      	mov	r1, r7
   b5fb4:	4630      	mov	r0, r6
   b5fb6:	f000 f8ab 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b5fba:	2800      	cmp	r0, #0
   b5fbc:	d0f6      	beq.n	b5fac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5fbe:	2301      	movs	r3, #1
   b5fc0:	f8c4 8000 	str.w	r8, [r4]
   b5fc4:	7125      	strb	r5, [r4, #4]
   b5fc6:	71a3      	strb	r3, [r4, #6]
   b5fc8:	e7f0      	b.n	b5fac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5fca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5fca:	b538      	push	{r3, r4, r5, lr}
   b5fcc:	4615      	mov	r5, r2
   b5fce:	461c      	mov	r4, r3
   b5fd0:	f000 f89e 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b5fd4:	b120      	cbz	r0, b5fe0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5fd6:	2308      	movs	r3, #8
   b5fd8:	60e3      	str	r3, [r4, #12]
   b5fda:	2306      	movs	r3, #6
   b5fdc:	6025      	str	r5, [r4, #0]
   b5fde:	7123      	strb	r3, [r4, #4]
   b5fe0:	bd38      	pop	{r3, r4, r5, pc}

000b5fe2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5fe4:	4605      	mov	r5, r0
   b5fe6:	460c      	mov	r4, r1
   b5fe8:	9201      	str	r2, [sp, #4]
   b5fea:	461e      	mov	r6, r3
   b5fec:	f000 f890 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b5ff0:	b950      	cbnz	r0, b6008 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5ff2:	2e03      	cmp	r6, #3
   b5ff4:	d808      	bhi.n	b6008 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5ff6:	6823      	ldr	r3, [r4, #0]
   b5ff8:	9a01      	ldr	r2, [sp, #4]
   b5ffa:	695b      	ldr	r3, [r3, #20]
   b5ffc:	4629      	mov	r1, r5
   b5ffe:	4620      	mov	r0, r4
   b6000:	b002      	add	sp, #8
   b6002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6006:	4718      	bx	r3
   b6008:	b002      	add	sp, #8
   b600a:	bd70      	pop	{r4, r5, r6, pc}

000b600c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b600c:	b510      	push	{r4, lr}
   b600e:	4b03      	ldr	r3, [pc, #12]	; (b601c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6010:	6003      	str	r3, [r0, #0]
   b6012:	4604      	mov	r4, r0
   b6014:	f7ff ffa6 	bl	b5f64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6018:	4620      	mov	r0, r4
   b601a:	bd10      	pop	{r4, pc}
   b601c:	000b6634 	.word	0x000b6634

000b6020 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6020:	b510      	push	{r4, lr}
   b6022:	4604      	mov	r4, r0
   b6024:	f7ff fff2 	bl	b600c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6028:	4620      	mov	r0, r4
   b602a:	210c      	movs	r1, #12
   b602c:	f7fe f837 	bl	b409e <_ZdlPvj>
   b6030:	4620      	mov	r0, r4
   b6032:	bd10      	pop	{r4, pc}

000b6034 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6036:	9f08      	ldr	r7, [sp, #32]
   b6038:	4297      	cmp	r7, r2
   b603a:	4605      	mov	r5, r0
   b603c:	460e      	mov	r6, r1
   b603e:	4614      	mov	r4, r2
   b6040:	d00a      	beq.n	b6058 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6042:	68a8      	ldr	r0, [r5, #8]
   b6044:	6802      	ldr	r2, [r0, #0]
   b6046:	9708      	str	r7, [sp, #32]
   b6048:	6a15      	ldr	r5, [r2, #32]
   b604a:	4631      	mov	r1, r6
   b604c:	4622      	mov	r2, r4
   b604e:	46ac      	mov	ip, r5
   b6050:	b003      	add	sp, #12
   b6052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6056:	4760      	bx	ip
   b6058:	4619      	mov	r1, r3
   b605a:	9301      	str	r3, [sp, #4]
   b605c:	f000 f858 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b6060:	9b01      	ldr	r3, [sp, #4]
   b6062:	2800      	cmp	r0, #0
   b6064:	d0ed      	beq.n	b6042 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6066:	2006      	movs	r0, #6
   b6068:	b003      	add	sp, #12
   b606a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b606c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b606c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6070:	460d      	mov	r5, r1
   b6072:	4619      	mov	r1, r3
   b6074:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6078:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b607c:	4681      	mov	r9, r0
   b607e:	4617      	mov	r7, r2
   b6080:	4698      	mov	r8, r3
   b6082:	f000 f845 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b6086:	b190      	cbz	r0, b60ae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6088:	2d00      	cmp	r5, #0
   b608a:	6034      	str	r4, [r6, #0]
   b608c:	7137      	strb	r7, [r6, #4]
   b608e:	db09      	blt.n	b60a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6090:	1961      	adds	r1, r4, r5
   b6092:	458a      	cmp	sl, r1
   b6094:	bf0c      	ite	eq
   b6096:	2106      	moveq	r1, #6
   b6098:	2101      	movne	r1, #1
   b609a:	71b1      	strb	r1, [r6, #6]
   b609c:	2000      	movs	r0, #0
   b609e:	b001      	add	sp, #4
   b60a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b60a4:	3502      	adds	r5, #2
   b60a6:	d1f9      	bne.n	b609c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60a8:	2301      	movs	r3, #1
   b60aa:	71b3      	strb	r3, [r6, #6]
   b60ac:	e7f6      	b.n	b609c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60ae:	4554      	cmp	r4, sl
   b60b0:	d106      	bne.n	b60c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b60b2:	4659      	mov	r1, fp
   b60b4:	4648      	mov	r0, r9
   b60b6:	f000 f82b 	bl	b6110 <_ZNKSt9type_infoeqERKS_>
   b60ba:	b108      	cbz	r0, b60c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b60bc:	7177      	strb	r7, [r6, #5]
   b60be:	e7ed      	b.n	b609c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60c0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b60c4:	6803      	ldr	r3, [r0, #0]
   b60c6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b60ca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b60ce:	69dc      	ldr	r4, [r3, #28]
   b60d0:	463a      	mov	r2, r7
   b60d2:	4643      	mov	r3, r8
   b60d4:	4629      	mov	r1, r5
   b60d6:	46a4      	mov	ip, r4
   b60d8:	b001      	add	sp, #4
   b60da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60de:	4760      	bx	ip

000b60e0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b60e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b60e4:	4607      	mov	r7, r0
   b60e6:	460c      	mov	r4, r1
   b60e8:	4615      	mov	r5, r2
   b60ea:	461e      	mov	r6, r3
   b60ec:	f7ff ff6d 	bl	b5fca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b60f0:	b948      	cbnz	r0, b6106 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b60f2:	68b8      	ldr	r0, [r7, #8]
   b60f4:	6803      	ldr	r3, [r0, #0]
   b60f6:	699f      	ldr	r7, [r3, #24]
   b60f8:	462a      	mov	r2, r5
   b60fa:	4633      	mov	r3, r6
   b60fc:	4621      	mov	r1, r4
   b60fe:	46bc      	mov	ip, r7
   b6100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6104:	4760      	bx	ip
   b6106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b610a <_ZNSt9type_infoD1Ev>:
   b610a:	4770      	bx	lr

000b610c <_ZNKSt9type_info14__is_pointer_pEv>:
   b610c:	2000      	movs	r0, #0
   b610e:	4770      	bx	lr

000b6110 <_ZNKSt9type_infoeqERKS_>:
   b6110:	4281      	cmp	r1, r0
   b6112:	b508      	push	{r3, lr}
   b6114:	d00e      	beq.n	b6134 <_ZNKSt9type_infoeqERKS_+0x24>
   b6116:	6840      	ldr	r0, [r0, #4]
   b6118:	7803      	ldrb	r3, [r0, #0]
   b611a:	2b2a      	cmp	r3, #42	; 0x2a
   b611c:	d00c      	beq.n	b6138 <_ZNKSt9type_infoeqERKS_+0x28>
   b611e:	6849      	ldr	r1, [r1, #4]
   b6120:	780b      	ldrb	r3, [r1, #0]
   b6122:	2b2a      	cmp	r3, #42	; 0x2a
   b6124:	bf08      	it	eq
   b6126:	3101      	addeq	r1, #1
   b6128:	f000 f866 	bl	b61f8 <strcmp>
   b612c:	fab0 f080 	clz	r0, r0
   b6130:	0940      	lsrs	r0, r0, #5
   b6132:	bd08      	pop	{r3, pc}
   b6134:	2001      	movs	r0, #1
   b6136:	e7fc      	b.n	b6132 <_ZNKSt9type_infoeqERKS_+0x22>
   b6138:	2000      	movs	r0, #0
   b613a:	e7fa      	b.n	b6132 <_ZNKSt9type_infoeqERKS_+0x22>

000b613c <atexit>:
   b613c:	2300      	movs	r3, #0
   b613e:	4601      	mov	r1, r0
   b6140:	461a      	mov	r2, r3
   b6142:	4618      	mov	r0, r3
   b6144:	f000 b872 	b.w	b622c <__register_exitproc>

000b6148 <ldiv>:
   b6148:	2900      	cmp	r1, #0
   b614a:	b510      	push	{r4, lr}
   b614c:	fb91 f4f2 	sdiv	r4, r1, r2
   b6150:	fb02 1314 	mls	r3, r2, r4, r1
   b6154:	db06      	blt.n	b6164 <ldiv+0x1c>
   b6156:	2b00      	cmp	r3, #0
   b6158:	da01      	bge.n	b615e <ldiv+0x16>
   b615a:	3401      	adds	r4, #1
   b615c:	1a9b      	subs	r3, r3, r2
   b615e:	e9c0 4300 	strd	r4, r3, [r0]
   b6162:	bd10      	pop	{r4, pc}
   b6164:	2b00      	cmp	r3, #0
   b6166:	bfc4      	itt	gt
   b6168:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b616c:	189b      	addgt	r3, r3, r2
   b616e:	e7f6      	b.n	b615e <ldiv+0x16>

000b6170 <memcpy>:
   b6170:	440a      	add	r2, r1
   b6172:	4291      	cmp	r1, r2
   b6174:	f100 33ff 	add.w	r3, r0, #4294967295
   b6178:	d100      	bne.n	b617c <memcpy+0xc>
   b617a:	4770      	bx	lr
   b617c:	b510      	push	{r4, lr}
   b617e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6182:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6186:	4291      	cmp	r1, r2
   b6188:	d1f9      	bne.n	b617e <memcpy+0xe>
   b618a:	bd10      	pop	{r4, pc}

000b618c <memset>:
   b618c:	4402      	add	r2, r0
   b618e:	4603      	mov	r3, r0
   b6190:	4293      	cmp	r3, r2
   b6192:	d100      	bne.n	b6196 <memset+0xa>
   b6194:	4770      	bx	lr
   b6196:	f803 1b01 	strb.w	r1, [r3], #1
   b619a:	e7f9      	b.n	b6190 <memset+0x4>

000b619c <srand>:
   b619c:	b538      	push	{r3, r4, r5, lr}
   b619e:	4b10      	ldr	r3, [pc, #64]	; (b61e0 <srand+0x44>)
   b61a0:	681d      	ldr	r5, [r3, #0]
   b61a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b61a4:	4604      	mov	r4, r0
   b61a6:	b9b3      	cbnz	r3, b61d6 <srand+0x3a>
   b61a8:	2018      	movs	r0, #24
   b61aa:	f7fe fe53 	bl	b4e54 <malloc>
   b61ae:	4602      	mov	r2, r0
   b61b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b61b2:	b920      	cbnz	r0, b61be <srand+0x22>
   b61b4:	4b0b      	ldr	r3, [pc, #44]	; (b61e4 <srand+0x48>)
   b61b6:	480c      	ldr	r0, [pc, #48]	; (b61e8 <srand+0x4c>)
   b61b8:	2142      	movs	r1, #66	; 0x42
   b61ba:	f7fe fe6b 	bl	b4e94 <__assert_func>
   b61be:	490b      	ldr	r1, [pc, #44]	; (b61ec <srand+0x50>)
   b61c0:	4b0b      	ldr	r3, [pc, #44]	; (b61f0 <srand+0x54>)
   b61c2:	e9c0 1300 	strd	r1, r3, [r0]
   b61c6:	4b0b      	ldr	r3, [pc, #44]	; (b61f4 <srand+0x58>)
   b61c8:	6083      	str	r3, [r0, #8]
   b61ca:	230b      	movs	r3, #11
   b61cc:	8183      	strh	r3, [r0, #12]
   b61ce:	2100      	movs	r1, #0
   b61d0:	2001      	movs	r0, #1
   b61d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b61d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b61d8:	2200      	movs	r2, #0
   b61da:	611c      	str	r4, [r3, #16]
   b61dc:	615a      	str	r2, [r3, #20]
   b61de:	bd38      	pop	{r3, r4, r5, pc}
   b61e0:	2003e604 	.word	0x2003e604
   b61e4:	000b666d 	.word	0x000b666d
   b61e8:	000b6684 	.word	0x000b6684
   b61ec:	abcd330e 	.word	0xabcd330e
   b61f0:	e66d1234 	.word	0xe66d1234
   b61f4:	0005deec 	.word	0x0005deec

000b61f8 <strcmp>:
   b61f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b61fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6200:	2a01      	cmp	r2, #1
   b6202:	bf28      	it	cs
   b6204:	429a      	cmpcs	r2, r3
   b6206:	d0f7      	beq.n	b61f8 <strcmp>
   b6208:	1ad0      	subs	r0, r2, r3
   b620a:	4770      	bx	lr

000b620c <strcpy>:
   b620c:	4603      	mov	r3, r0
   b620e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6212:	f803 2b01 	strb.w	r2, [r3], #1
   b6216:	2a00      	cmp	r2, #0
   b6218:	d1f9      	bne.n	b620e <strcpy+0x2>
   b621a:	4770      	bx	lr

000b621c <strlen>:
   b621c:	4603      	mov	r3, r0
   b621e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6222:	2a00      	cmp	r2, #0
   b6224:	d1fb      	bne.n	b621e <strlen+0x2>
   b6226:	1a18      	subs	r0, r3, r0
   b6228:	3801      	subs	r0, #1
   b622a:	4770      	bx	lr

000b622c <__register_exitproc>:
   b622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6230:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b62ec <__register_exitproc+0xc0>
   b6234:	4606      	mov	r6, r0
   b6236:	f8d8 0000 	ldr.w	r0, [r8]
   b623a:	461f      	mov	r7, r3
   b623c:	460d      	mov	r5, r1
   b623e:	4691      	mov	r9, r2
   b6240:	f000 f856 	bl	b62f0 <__retarget_lock_acquire_recursive>
   b6244:	4b25      	ldr	r3, [pc, #148]	; (b62dc <__register_exitproc+0xb0>)
   b6246:	681c      	ldr	r4, [r3, #0]
   b6248:	b934      	cbnz	r4, b6258 <__register_exitproc+0x2c>
   b624a:	4c25      	ldr	r4, [pc, #148]	; (b62e0 <__register_exitproc+0xb4>)
   b624c:	601c      	str	r4, [r3, #0]
   b624e:	4b25      	ldr	r3, [pc, #148]	; (b62e4 <__register_exitproc+0xb8>)
   b6250:	b113      	cbz	r3, b6258 <__register_exitproc+0x2c>
   b6252:	681b      	ldr	r3, [r3, #0]
   b6254:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6258:	6863      	ldr	r3, [r4, #4]
   b625a:	2b1f      	cmp	r3, #31
   b625c:	dd07      	ble.n	b626e <__register_exitproc+0x42>
   b625e:	f8d8 0000 	ldr.w	r0, [r8]
   b6262:	f000 f847 	bl	b62f4 <__retarget_lock_release_recursive>
   b6266:	f04f 30ff 	mov.w	r0, #4294967295
   b626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b626e:	b34e      	cbz	r6, b62c4 <__register_exitproc+0x98>
   b6270:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6274:	b988      	cbnz	r0, b629a <__register_exitproc+0x6e>
   b6276:	4b1c      	ldr	r3, [pc, #112]	; (b62e8 <__register_exitproc+0xbc>)
   b6278:	b923      	cbnz	r3, b6284 <__register_exitproc+0x58>
   b627a:	f8d8 0000 	ldr.w	r0, [r8]
   b627e:	f000 f838 	bl	b62f2 <__retarget_lock_release>
   b6282:	e7f0      	b.n	b6266 <__register_exitproc+0x3a>
   b6284:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6288:	f7fe fde4 	bl	b4e54 <malloc>
   b628c:	2800      	cmp	r0, #0
   b628e:	d0f4      	beq.n	b627a <__register_exitproc+0x4e>
   b6290:	2300      	movs	r3, #0
   b6292:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6296:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b629a:	6863      	ldr	r3, [r4, #4]
   b629c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b62a0:	2201      	movs	r2, #1
   b62a2:	409a      	lsls	r2, r3
   b62a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b62a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b62ac:	4313      	orrs	r3, r2
   b62ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b62b2:	2e02      	cmp	r6, #2
   b62b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b62b8:	bf02      	ittt	eq
   b62ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b62be:	4313      	orreq	r3, r2
   b62c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b62c4:	6863      	ldr	r3, [r4, #4]
   b62c6:	f8d8 0000 	ldr.w	r0, [r8]
   b62ca:	1c5a      	adds	r2, r3, #1
   b62cc:	3302      	adds	r3, #2
   b62ce:	6062      	str	r2, [r4, #4]
   b62d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b62d4:	f000 f80e 	bl	b62f4 <__retarget_lock_release_recursive>
   b62d8:	2000      	movs	r0, #0
   b62da:	e7c6      	b.n	b626a <__register_exitproc+0x3e>
   b62dc:	2003e7e8 	.word	0x2003e7e8
   b62e0:	2003e75c 	.word	0x2003e75c
   b62e4:	00000000 	.word	0x00000000
   b62e8:	000b4e55 	.word	0x000b4e55
   b62ec:	2003e668 	.word	0x2003e668

000b62f0 <__retarget_lock_acquire_recursive>:
   b62f0:	4770      	bx	lr

000b62f2 <__retarget_lock_release>:
   b62f2:	4770      	bx	lr

000b62f4 <__retarget_lock_release_recursive>:
   b62f4:	4770      	bx	lr

000b62f6 <link_code_end>:
	...

000b62f8 <dynalib_user>:
   b62f8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6308:	0000 0000 6143 6c6c 6162 6b63 4d00 6c42     ....Callback.MBl
   b6318:	7361 6b68 4169 6772 6e6f 005f 3231 3433     ashkiArgon_.1234
   b6328:	4d00 6c42 7361 6b68 4169 6772 6e6f 6900     .MBlashkiArgon.i
   b6338:	546e 706f 6369 6d2f 7365 6173 6567 5300     nTopic/message.S
   b6348:	6174 7472 0021 7550 6c62 7369 0068 6568     tart!.Publish.he
   b6358:	6c6c 206f 6f77 6c72 0064 6944 6373 6e6f     llo world.Discon
   b6368:	656e 7463 6465 2021 7254 6979 676e 7420     nected! Trying t
   b6378:	206f 6572 6f63 6e6e 6365 2074 6f6e 2e77     o reconnect now.
   b6388:	2e2e 3100 3239 312e 3836 302e 322e 0036     ...192.168.0.26.
   b6398:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000b63a8 <_ZTVN5spark13EthernetClassE>:
	...
   b63b0:	4f13 000b 4f09 000b 4eff 000b 4ef5 000b     .O...O...N...N..
   b63c0:	4ee9 000b 4edd 000b 5d71 000b 5d79 000b     .N...N..q]..y]..
   b63d0:	4ed1 000b 4ec9 000b 4ebf 000b 4eb5 000b     .N...N...N...N..
   b63e0:	5da9 000b                                   .]..

000b63e4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b63ec:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b63fc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b640c <_ZTV9IPAddress>:
	...
   b6414:	5465 000b 5455 000b 5457 000b               eT..UT..WT..

000b6420 <_ZTV9USBSerial>:
	...
   b6428:	5577 000b 55df 000b 55b5 000b 5165 000b     wU...U...U..eQ..
   b6438:	55a7 000b 5579 000b 5589 000b 55d9 000b     .U..yU...U...U..
   b6448:	5599 000b 5571 000b                         .U..qU..

000b6450 <_ZTV11USARTSerial>:
	...
   b6458:	5679 000b 56e5 000b 56bd 000b 5165 000b     yV...V...V..eQ..
   b6468:	568d 000b 56a9 000b 569b 000b 56b7 000b     .V...V...V...V..
   b6478:	567b 000b 567f 000b 6977 6972 676e 7200     {V...V..wiring.r
   b6488:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b6498 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b64a0:	57a1 000b 57c5 000b 5caf 000b 57d3 000b     .W...W...\...W..
   b64b0:	57a5 000b                                   .W..

000b64b4 <_ZTV9TCPClient>:
	...
   b64bc:	52c5 000b 52dd 000b 571d 000b 5737 000b     .R...R...W..7W..
   b64cc:	5b45 000b 5761 000b 59bb 000b 5795 000b     E[..aW...Y...W..
   b64dc:	5a4d 000b 588d 000b 59e9 000b 5bf9 000b     MZ...X...Y...[..
   b64ec:	5989 000b 5797 000b 5749 000b 57d9 000b     .Y...W..IW...W..
   b64fc:	586d 000b                                   mX..

000b6500 <_ZTVN5spark9WiFiClassE>:
	...
   b6508:	5d13 000b 5d09 000b 5cff 000b 5cb5 000b     .]...]...\...\..
   b6518:	5cf3 000b 5ce7 000b 5d71 000b 5d79 000b     .\...\..q]..y]..
   b6528:	5cdb 000b 5cd3 000b 5cc9 000b 5cbf 000b     .\...\...\...\..
   b6538:	5da9 000b                                   .]..

000b653c <_ZTVN5spark12NetworkClassE>:
	...
   b6544:	5d31 000b 5d3b 000b 5d45 000b 5d4f 000b     1]..;]..E]..O]..
   b6554:	5d59 000b 5d65 000b 5d71 000b 5d79 000b     Y]..e]..q]..y]..
   b6564:	5d81 000b 5d8d 000b 5d95 000b 5d9f 000b     .]...]...]...]..
   b6574:	5da9 000b                                   .]..

000b6578 <_ZSt7nothrow>:
	...

000b6579 <_ZTSSt19_Sp_make_shared_tag>:
   b6579:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6589:	6572 5f64 6174 0067 0000                     red_tag....

000b6594 <_ZTISt19_Sp_make_shared_tag>:
   b6594:	65d4 000b 6579 000b                         .e..ye..

000b659c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b659c:	6634 000b 65a8 000b 6658 000b               4f...e..Xf..

000b65a8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b65a8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b65b8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b65c8:	0045 0000                                   E...

000b65cc <_ZTVN10__cxxabiv117__class_type_infoE>:
   b65cc:	0000 0000 659c 000b 5f65 000b 5f79 000b     .....e..e_..y_..
   b65dc:	610d 000b 610d 000b 5fe3 000b 5f25 000b     .a...a..._..%_..
   b65ec:	5fcb 000b 5f8d 000b 5f57 000b               ._..._..W_..

000b65f8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b65f8:	6634 000b 6604 000b 659c 000b               4f...f...e..

000b6604 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6604:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6614:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6624:	666e 456f 0000 0000                         nfoE....

000b662c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b662c:	0000 0000 65f8 000b 600d 000b 6021 000b     .....e...`..!`..
   b663c:	610d 000b 610d 000b 5fe3 000b 5f25 000b     .a...a..._..%_..
   b664c:	60e1 000b 606d 000b 6035 000b               .`..m`..5`..

000b6658 <_ZTISt9type_info>:
   b6658:	65d4 000b 6660 000b                         .e..`f..

000b6660 <_ZTSSt9type_info>:
   b6660:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6670:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6680:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b6690:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b66a0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b66b0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b66c0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b66d0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b66e0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b66f0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6701 <link_const_variable_data_end>:
   b6701:	00          	.byte	0x00
	...

000b6704 <link_constructors_location>:
   b6704:	000b41d5 	.word	0x000b41d5
   b6708:	000b4f1d 	.word	0x000b4f1d
   b670c:	000b4f31 	.word	0x000b4f31
   b6710:	000b5155 	.word	0x000b5155
   b6714:	000b5225 	.word	0x000b5225
   b6718:	000b52a9 	.word	0x000b52a9
   b671c:	000b5311 	.word	0x000b5311
   b6720:	000b5d1d 	.word	0x000b5d1d
   b6724:	000b5e81 	.word	0x000b5e81

000b6728 <link_constructors_end>:
	...
